1/05
====

CSS Display
- none
- inline
- block
- inline-block

5. flex        :  It is used for a container to keep all its elements flexible by row or
               column. Flex have various supporting attributes
               
                a) flex-direction
                b) flex-wrap
                c) justify-content
                d) align-items

             - Flex direction can be row, row-reverse, column, & column-reverse
             - Justify Content can be space-between, around, evenly & center.
             - Align Items depends on direction
                a) row    : baseline [top], center, end [bottom]
                b) column: baseline [left], center, end [right]

             - Flex wrap allows to wrap elements into multiple rows and columns.
               You can add wrapping or remove to display compressed.


Ex:
<!DOCTYPE html>
<html lang="en">
<head>
   <meta charset="UTF-8">
   <meta name="viewport" content="width=device-width, initial-scale=1.0">
   <title>Document</title>
   <style>
      nav {
         border: 1px solid black;
         padding: 20px;
         height: 400px;
         display: flex;
         flex-direction: column;
         flex-wrap: wrap;
         align-items: center;
         justify-content:space-between;
      }
      nav div {
         width: 100px;
         border:1px solid gray;
         padding: 5px;
         text-align: center;
      }
   </style>
</head>
<body>
    <nav>
       <div>Home</div>
       <div>About</div>
       <div>Contact</div>
       <div>Shop</div>
       <div>Blog</div>
       <div>Home</div>
       <div>About</div>
       <div>Contact</div>
       <div>Shop</div>
       <div>Blog</div>
       <div>Home</div>
       <div>About</div>
       <div>Contact</div>
       <div>Shop</div>
       <div>Blog</div>
       <div>Home</div>
       <div>About</div>
       <div>Contact</div>
       <div>Shop</div>
       <div>Blog</div>
       <div>About</div>
       <div>Contact</div>
       <div>Shop</div>
       <div>Blog</div>
       <div>Home</div>
       <div>About</div>
       <div>Contact</div>
       <div>Shop</div>
       <div>Blog</div>
       <div>About</div>
       <div>Contact</div>
       <div>Shop</div>
       <div>Blog</div>
       <div>Home</div>
       <div>About</div>
       <div>Contact</div>
       <div>Shop</div>
       <div>Blog</div>
       <div>About</div>
       <div>Contact</div>
       <div>Shop</div>
       <div>Blog</div>
       <div>Home</div>
       <div>About</div>
       <div>Contact</div>
       <div>Shop</div>
       <div>Blog</div>
       <div>About</div>
       <div>Contact</div>
       <div>Shop</div>
       <div>Blog</div>
    </nav>
</body>
</html>

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
   <meta charset="UTF-8">
   <meta name="viewport" content="width=device-width, initial-scale=1.0">
   <title>Document</title>
   <style>
      ul {
         list-style: none;
         display: flex;
         flex-direction: row;
      }
      li {
         border:1px solid black;
         padding: 10px;
         width: 100px;
         display: flex;
         flex-direction: row;
         justify-content: space-around;
      }
   </style>
   <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
</head>
<body>
    <ul>
      <li><span class="bi bi-house"></span> Home</li>
      <li><span class="bi bi-globe"></span> About</li>
      <li><span class="bi bi-envelope"></span> Contact</li>
      <li><span class="bi bi-webcam"></span> Blog</li>
    </ul>
</body>
</html>

6. Grid
 - It is used for creating a responsive layout.
 - Layout comprises data arranged in rows and columns.
 - Grid can dynamically control the data in rows and columns.
 - Grid attributes are
   
        a) grid-template-columns
        b) grid-row
        c) grid-column
        d) grid-gap
       
Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
        header, nav, main, aside, footer {
            border:1px solid black;
            padding: 10px;
            margin: 5px;
        }
        main {
            height: 400px;
        }
        body {
            display: grid;
            grid-template-columns: 2fr 8fr 2fr;
        }
        header {
            grid-row: 1;
            grid-column: 1/4;
            background-color: yellow;
        }
        nav {
            grid-row: 2;
            grid-column: 1;
            background-color: lightgreen;
        }
        main {
            grid-row: 2;
            grid-column: 2;
        }
        aside {
            grid-row: 2;
            grid-column: 3;
            background-color: lightcyan;
        }
        footer {
            grid-row: 3;
            grid-column: 1/4;
        }
    </style>
</head>
<body>
    <header>
        Header
    </header>
    <nav>Nav</nav>
    <main>Main</main>
    <aside>Aside</aside>
    <footer>Footer</footer>
</body>
</html>

Note: You have to use "media queries" to know the screen or device size, so that
      content can be adjusted according to device.

Syntax:
        @media  type  (condition)
        {
        }

        type        : It refers to screen, print
        condition    : It uses min-width, max-width, orientation.
Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
        header, nav, main, aside, footer {
            border:1px solid black;
            padding: 10px;
            margin: 5px;
        }
        main {
            height: 400px;
        }

        @media screen and (orientation:landscape){
            body {
            display: grid;
            grid-template-columns: 2fr 8fr 2fr;
            }
            header {
                grid-row: 1;
                grid-column: 1/4;
                background-color: yellow;
            }
            nav {
                grid-row: 2;
                grid-column: 1;
                background-color: lightgreen;
            }
            main {
                grid-row: 2;
                grid-column: 2;
            }
            aside {
                grid-row: 2;
                grid-column: 3;
                background-color: lightcyan;
            }
            footer {
                grid-row: 3;
                grid-column: 1/4;
            }
        }

        @media screen and (orientation:portrait) {
            body {
                display: grid;
                grid-template-columns: 12fr;
            }
            header {
                grid-row: 1;
                background-color: yellow;
            }
            nav {
                grid-row: 2;
                background-color: lightgreen;
            }
            main {
                grid-row: 3;
            }
            aside {
                grid-row: 4;
                background-color: lightcyan;
            }
            footer{
                grid-row: 5;
            }
        }

       
    </style>
</head>
<body>
    <header>
        Header
    </header>
    <nav>Nav</nav>
    <main>Main</main>
    <aside>Aside</aside>
    <footer>Footer</footer>
</body>
</html>
 
Ex: <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <style>
        header {
            font-size: 20px;
            font-family: Arial;
            padding: 20px;
        }
        .brand-title {
            font-size: 24px;
            font-weight: bold;
        }
        @media screen and (orientation:landscape){
            header {
                display: flex;
                flex-direction: row;
                justify-content: space-between;
            }
            nav span {
                margin-right: 30px;
            }
            .btn {
                display: none;
            }
            .women-fashion {
                background-image: url("../public/images/women-fashion.jpg");
                background-size: cover;
                width: 300px;
                height: 300px;
            }
        }
        @media screen and (orientation:portrait) {
            nav {
                display: none;
            }
            .btn {
                display: inline;
                font-size: 24px;
            }
            header {
                display: flex;
                justify-content: space-between;
            }
            .women-fashion {
                background-image: url("../public/images/girl-window.jpg");
                background-size: cover;
                width: 100%;
                height: 300px;
            }
        }
    </style>
</head>
<body>
    <header>
        <div>
            <span class="brand-title">Shopper.</span>
        </div>
        <nav>
            <span>Home</span>
            <span>Shop</span>
            <span>Pages</span>
            <span>Blog</span>
            <span>Docs</span>
        </nav>
        <div class="btn">
            <span class="bi bi-justify"></span>
        </div>
    </header>
    <main>
        <div class="women-fashion">

        </div>
    </main>
</body>
</html>

2/05
===

Ex: Responsive Shopper Template

1. src/styles/shopper-template.css

.header-row-1 {
    background-color: #e6e4e4;
    padding: 15px;
    font-family: Arial;
    font-size: 14px;
    display: flex;
    flex-direction: row;
    justify-content: space-between;
}
.header-row-1  span {
    padding-left: 10px;
    padding-right: 10px;
}
.header-row-2 {
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    align-items: center;
    padding: 10px;
    font-size: 20px;
    font-family: Arial;
}
.brand-title {
    font-size: 30px;
    font-weight: bold;
}
nav span {
    padding-left: 15px;
    padding-right: 15px;
    font-size: 18px;
}
.short-cuts span {
    padding-left: 5px;
    padding-right: 5px;
}
.bi-justify {
    display: none;
}

article {
    background-color: black;
    color:white;
    padding: 15px;
    text-align: center;
    font-family: Arial;
    font-size: 16px;
}
.bi-lightning-fill {
    color:gold;
}

main {
    height: 450px;
    display: grid;
    grid-template-columns: 4fr 4fr 4fr;
    margin-top: 10px;
}
.women-fashion {
    background-image: url("../../public/images/women-fashion.jpg");
    background-size: cover;
    display: flex;
    flex-direction: column;
    justify-content: space-around;
    align-items: center;
    opacity: 0.8;
}
.men-fashion {
    background-image: url("../../public/images/men-fashion.jpg");
    background-size: cover;
    display: flex;
    flex-direction: column;
    justify-content: space-around;
    align-items: center;
    opacity: 0.8;
}
.kids-fashion {
    background-image: url("../../public/images/kids-fashion.jpg");
    background-size: cover;
    display: flex;
    flex-direction: column;
    justify-content: space-around;
    align-items: center;
    opacity: 0.8;
}
.main-title {
    font-family: Arial;
    font-size: 50px;
    font-weight: bold;
    color:white;
    text-shadow: 2px 2px 2px black;
}
.btn-shop {
    background-color: white;
    padding: 10px;
    width: 140px;
    font-family: Arial;
    text-align: center;
    box-shadow: 2px 2px 2px black;
    border-radius: 5px;
}
.women-fashion:hover, .men-fashion:hover, .kids-fashion:hover {
    opacity: 1;
    cursor: grab;
}
.services {
    display: grid;
    grid-template-columns: 3fr 3fr 3fr 3fr;
    padding: 20px;
    margin-top: 20px;
}
.services .bi-truck, .bi-tag, .bi-lock, .bi-arrow-left-right {
    color:red;
}

footer {
    background-color: black;
    color:white;
    font-family: Arial;
    padding: 10px;
}
.footer-row-1 {
    padding-top: 40px;
    padding-bottom: 40px;
    text-align: center;
}
.footer-title {
    font-size: 30px;
    font-weight: bold;
    padding-bottom: 30px;
}
.email {
    background-color: rgba(135, 131, 131, 0.653);
    border:1px solid gray;
    padding: 20px;
    display: inline-block;
    width: 300px;
    text-align: left;
}
.subscribe {
    background-color: rgb(123, 122, 122);
    padding: 20px;
    width: 150px;
    display: inline-block;
    color:white;
    margin-left: 10px;
}
.footer-row-2 {
    margin-top: 30px;
    display: grid;
    grid-template-columns: 2.4fr 2.4fr 2.4fr 2.4fr 2.4fr;
    padding: 20px;
}
.service-title {
    font-size: 16px;
    font-weight: bold;
    text-transform: uppercase;
    display: block;
    padding-bottom: 20px;
}
.service-title~span {
    display: block;
    padding-bottom: 10px;
}
address span {
    display: block;
    padding-bottom: 10px;
}
aside span {
    padding-right: 5px;
}
.footer-brand-title {
    font-size: 30px;
    font-weight: bold;
    padding-bottom: 20px;
    display: block;
}

@media screen and (orientation:portrait){
    .header-aside, .header-nav{
        display: none;
    }
    .header-brand span:nth-of-type(1n+2)  {
        display: none;
    }
    .header-row-2 nav, .short-cuts {
        display: none;
    }
    .bi-justify {
        display: inline;
        border:none;
        font-size: 20px;
    }
    article {
        font-size: 14px;
    }
    .kids-fashion, .men-fashion {
        display: none;
    }
    main {
        display: grid;
        grid-template-columns: 12fr;
    }
    .services {
        display: grid;
        grid-template-columns: 12fr;
        padding: 20px;
        margin-top: 20px;
    }
    .services .bi-truck, .bi-tag, .bi-lock, .bi-arrow-left-right {
        color:red;
    }
    .services div {
        padding: 20px;
        box-shadow: 1px 1px 2px gray;
        margin-bottom: 10px;
    }
}


2. shopper-template.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Shopper</title>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <link rel="stylesheet" href="../src/styles/shopper-template.css">
</head>
<body>
    <header>
        <div class="header-row-1">
            <div class="header-brand">
                <span class="bi bi-truck"> FREE SHIPPING WORLDWIDE </span>
                <span>United States <span class="bi bi-chevron-down"></span> </span>
                <span>USD <span class="bi bi-chevron-down"></span> </span>
                <span>English <span class="bi bi-chevron-down"></span> </span>
            </div>
            <div class="header-nav">
                <span>Shipping</span>
                <span>FAQ</span>
                <span>Contact</span>
            </div>
            <div class="header-aside">
               <aside>
                <span class="bi bi-facebook"></span>
                <span class="bi bi-twitter"></span>
                <span class="bi bi-instagram"></span>
                <span class="bi bi-youtube"></span>
               </aside>
            </div>
           
                <button class="bi bi-justify"></button>
           
        </div>
        <div class="header-row-2">
            <div>
                <span class="brand-title">Shopper.</span>
            </div>
           
                <nav>
                    <span>Home</span>
                    <span>Catalog</span>
                    <span>Shop</span>
                    <span>Blog</span>
                    <span>Pages</span>
                    <span>Docs</span>
                </nav>
           
            <div class="short-cuts">
                <span class="bi bi-search"></span>
                <span class="bi bi-person"></span>
                <span class="bi bi-heart"></span>
                <span class="bi bi-cart4"></span>
            </div>
           
                <button class="bi bi-justify"></button>
           
        </div>
    </header>
    <section>
        <article>
            <span class="bi bi-lightning-fill"></span>
            <span>HAPPY HOLIDAY DEALS ON EVERYTHING</span>
            <span class="bi bi-lightning-fill"></span>
        </article>
        <main>
            <div class="women-fashion">
                <div class="main-title">Women</div>
                <div class="btn-shop">
                    Shop Women <span class="bi bi-arrow-right"></span>
                </div>
            </div>
            <div class="men-fashion">
                <div class="main-title">Men</div>
                <div class="btn-shop">
                    Shop Men <span class="bi bi-arrow-right"></span>
                </div>
            </div>
            <div class="kids-fashion">
                <div class="main-title">Kids</div>
                <div class="btn-shop">
                    Shop Kids <span class="bi bi-arrow-right"></span>
                </div>
            </div>
        </main>
        <div class="services">
            <div>
                <span class="bi bi-truck">  </span> FREE SHIPPING
            </div>
            <div>
                <span class="bi bi-arrow-left-right">  </span> FREE RETURNS
            </div>
            <div>
                <span class="bi bi-lock">  </span> SECURE SHOPPING
            </div>
            <div>
                <span class="bi bi-tag">  </span> OVER 10,000 STYLES
            </div>
        </div>
    </section>
    <footer>
        <div class="footer-row-1">
                <div class="footer-title">Want style Ideas and Treats?</div>
                <div>
                    <span class="email">Enter Email*</span>
                    <span class="subscribe">Subscribe</span>
                </div>
        </div>
        <div class="footer-row-2">
            <div>
                <span class="footer-brand-title">Shopper.</span>
                <aside>
                    <span class="bi bi-facebook"></span>
                    <span class="bi bi-twitter"></span>
                    <span class="bi bi-instagram"></span>
                    <span class="bi bi-youtube"></span>
                    <span class="bi bi-linkedin"></span>
                </aside>
            </div>
            <div>
                <span class="service-title">Support</span>
                <span>Contact Us</span>
                <span>FAQs</span>
                <span>Size Guide</span>
                <span>Shipping & Returns</span>
            </div>
            <div>
                <span class="service-title">Shop</span>
                <span>Men's Shopping</span>
                <span>Women's Shopping</span>
                <span>Kids' Shopping</span>
                <span>Discounts</span>
            </div>
            <div>
                <span class="service-title">Company</span>
                <span>Our Story</span>
                <span>Careers</span>
                <span>Terms & Conditions</span>
                <span>Privacy & Cookie policy</span>
            </div>
            <div>
                <span class="service-title">CONTACT</span>
                <address>
                    <span>1-202-555-0105</span>
                    <span>1-202-555-0106</span>
                    <span>help@shopper.com</span>
                </address>
            </div>
        </div>
    </footer>
</body>
</html>

                         CSS  Backgrounds
background-color
background-image
background-size
background-position
background-attachment
background-repeat
               
Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
        body {
            height: 100vh;
            background-image: url("../public/images/a11.jpg"), url("../public/images/a10.jpg");
            background-repeat: no-repeat, repeat;
            background-size: 600px 300px, 200px 100px;
            background-position: center center;
            background-attachment: fixed, scroll;
        }
    </style>
</head>
<body>
    <p>Lorem ipsum, dolor sit amet consectetur adipisicing elit. Ea suscipit enim deserunt quia vel officia, ratione repudiandae aperiam magnam error sit nam consequuntur voluptas earum pariatur alias amet culpa optio! Lorem ipsum dolor sit amet consectetur, adipisicing elit. Iste iure laudantium magnam autem cumque, unde sequi, dolorem quia, quibusdam voluptates et atque? Atque amet iste quisquam tempore sapiente, dolorem quasi. Lorem ipsum dolor sit amet consectetur adipisicing elit. Officia suscipit, dolor laboriosam temporibus, magnam totam cum ullam eos labore sunt odio, voluptate est numquam excepturi accusantium tempore sint perspiciatis veniam.</p>

</body>
</html>

                                 CSS Float
 a) float    : start, end [left, right]
 b) clear    : left, right, both

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <style>
        header {
            font-family: Arial;
            padding: 20px;
            display: flex;
            justify-content: space-around;
            font-size: 20px;
            align-items: center;
        }
        .brand-title {
            font-size: 24px;
            font-weight: bold;
        }
        nav span {
            padding: 0px 20px 0px 20px;
        }
        .btn-buy {
            background-color: blue;
            color:white;
            border:none;
            padding: 15px;
            font-size: 16px;
            border-radius: 10px;
        }
        .img-banner {
            width: 50%;
            float: right;
        }
        main {
            padding-top: 100px;
            padding-left: 100px;
        }
        .title {
            font-size: 50px;
            font-family: Arial;
            padding-bottom: 20px;
        }
        .sub-title {
            font-size: 22px;
            font-family: Arial;
            padding-bottom: 40px;
        }
        .main-title {
            color:blue;
        }
        .btn-doc, .btn-page {
            padding: 20px;
            width: 200px;
            font-size: 20px;
            border:none;
        }
        .btn-page {
            background-color: blue;
            color:white;
        }
        .btn-doc {
            background-color: white;
            border:1px solid gray;
        }
    </style>
</head>
<body>
    <header>
        <div>
            <span class="brand-title">Landkit.</span>
        </div>
        <nav>
            <span>Landings</span>
            <span>Pages</span>
            <span>Account</span>
            <span>Documentation</span>
        </nav>
        <button class="btn-buy"> Buy now</button>
    </header>
    <section>
        <img src="../public/images/landkit-banner.jpg" class="img-banner">
        <main>
            <div class="title">
                Welcome to <span class="main-title">Landkit.</span>
                Develop anything.
            </div>
            <div class="sub-title">
                Build a beautiful, modern website with flexible Bootstrap components built from scratch.        
            </div>
            <div>
                <button class="btn-page">
                    <span>View all pages </span>
                    <span class="bi bi-arrow-right"></span>
                </button>
                <button class="btn-doc">
                    <span>Documents </span>
                    <span class="bi bi-arrow-right"></span>
                </button>
            </div>
        </main>
       
       
       
    </section>
</body>
</html>

3/05
====

Summary
- CSS Integration
- CSS Selectors
- CSS Rules
- CSS Units
- CSS Colors
- CSS Inheritance
- CSS Box Model
- CSS Positions
- CSS Display
- CSS Backgrounds
- CSS Zindex
- CSS Float

                         CSS Text Styles
font-size
font-family
font-weight
font-style
font-variant [small-caps]

text-align
text-decoration
text-shadow
text-indent
text-overflow
overflow
color
white-space
text-transform
letter-spacing
word-spacing
line-height
word-break

                          CSS Transforms
- Transforming is the process of converting from one state to another.
- CSS provides
    a) 2D Transforms
    b) 3D Transforms
- Transformation includes changing position, size, orientation etc.

2D Transforms:
- Two dimensional transformations allow to change position, size and orientation along X & Y axis.
- Transform methods include
    a) translate()
    b) scale()
    c) rotate()
    d) skew()
    e) matrix()

translate():
- It allows to change the location of element along X & Y axis.
- It have methods
       
        a) translate()        : short hand for both directions
        b) translateX()        : horizontal
        c) translateY()        : vertical

Syntax:
        {
          transform : translate(xPosition, yPosition);
        }

Note: Transform is an CSS attribute, which is not supported across all browser.
      It requires various plugins to configure for different browsers.

        -webkit        safari
        -moz        fire fox
        -o            opera
        -ms            Microsoft

Syntax:
        {
          transform : translateX(300px);
          -webkit-transform: translateX(300px);
          -moz-transform: translateX(300px);
          -o-transform: translateX(300px);
          -ms-transform: translateX(300px);
        }

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
        img {
            transform: translate(0px,0px);
            transition: 1s;
        }
        img:hover {
            transform: translate(300px, 100px);
            -webkit-transform: translate(300px, 100px);
            -moz-transform: translate(300px, 100px);
            -o-transform: translate(300px, 100px);
            -ms-transform:translate(300px, 100px) ;
            transition: 5s;
        }
    </style>
</head>
<body>
   <img src="../public/images/women-fashion.jpg" width="200" height="200">
</body>
</html>

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
       .women-fashion {
           width: 600px;
           height: 400px;
           overflow: hidden;
       }
       .img-women {
         width: 605px;
         height: 400px;
         transition: 100ms;
       }
       .img-women:hover {
          transform: translateX(-5px);
          transition: 200ms;
       }
    </style>
</head>
<body>
   <div class="women-fashion">
     <img src="../public/images/women-fashion.jpg" class="img-women">
   </div>
</body>
</html>


Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
       .shoe {
        width: 250px;
        height: 350px;
        background-image: url("../public/images/shoe-2.jpg");
        background-size: 100%;
        display: flex;
        flex-direction: column;
        justify-content: end;
        align-items: center;
        overflow: hidden;
       }
       .shoe:hover {
        background-image: url("../public/images/shoe-1.jpg");
        background-size: cover;
       }
       .short-cuts span {
          background-color: white;
          display: inline-block;
          width: 20px;
          height: 20px;
          border-radius: 20px;
          text-align: center;
          padding: 10px;
          margin: 0px 5px 0px 5px;
          font-size: 20px;
       }
       .short-cuts {
          transform: translateY(30px);
          transition: 1s;
       }
       .shoe:hover .short-cuts {
          transform: translateY(-10px);
          transition: 200ms;
       }
       .short-cuts span:hover {
          background-color: red;
          color:white;
          cursor: grab;
       }
    </style>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
</head>
<body>
   <div class="shoe">
        <div class="short-cuts">
            <span class="bi bi-eye-fill"></span>
            <span class="bi bi-cart4"></span>
            <span class="bi bi-heart"></span>
        </div>
   </div>
</body>
</html>

scale()    
- It is used to change the size of element.
- It can transform width using X position & height using Y position.
- Scale methods are
    a) scale()
    b) scaleX()
    c) scaleY()

Syntax:
    {
     transform : scale(xUnits, yUnits);
    }

- Scale units 1=100%

Syntax:
    {
     transform: scale(1.5, 2);    // width=150%   height=200%
    }

5/05
====

a) translate()
b) scale()

c) skew()            
- It is used to tilt element by specified angle.
- It have methods
    a) skew()
    b) skewX()
    c) skewY()

Syntax:
    {
      transform: skewX(20deg);
    }

d) rotate()
- It is used to rotate and change the orientation of element.
- You can rotate along X & Y axis by specified angle.

    a) rotate()
    b) rotateX()
    c) rotateY()

Syntax:
    {
     transform: rotateX(20deg);
    }

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
        body {
            height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
        }
        img {
            transform: rotate(0deg);
            transition: 1s;
        }
        img:hover {
            transform: rotate(-360deg);
            transition: 3s;
        }
    </style>
</head>
<body>
    <img src="../public/images/women-fashion.jpg" width="150" height="200">
</body>
</html>

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
        body {
            height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
        }
        img {
            transform: rotate(0deg) scale(1) skew(0deg);
            transition: 1s;
        }
        img:hover {
            transform: rotate(180deg) scale(2) skew(5deg);
            transition: 3s;
        }
    </style>
</head>
<body>
    <img src="../public/images/women-fashion.jpg" width="150" height="200">
</body>
</html>

e) Matrix
- It allows to apply multiple transforms.
- It can define translate, scale and skew.

Syntax:
    {
     matrix(scaleX, skewX, skewY, scaleY, translateX, translateY);
    }

    scale    : 1 = 100%
    skew    : 0.1 = 10deg
    translate    : 100 = 100px

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
        body {
            height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
        }
        img {
            transform: matrix(1,0,0,1,0,0);
            transition: 1s;
        }
        img:hover {
            transform: matrix(2,0.2,0,1.5,300,0);
            transition: 3s;
        }
    </style>
</head>
<body>
    <img src="../public/images/women-fashion.jpg" width="150" height="200">
</body>
</html>

                        CSS 3D Transforms
- 3D refers to 3 dimensional transformations.
- It includes X, Y & Z axis.
- It have methods
   
    a) translate3D(x,y,z)
    b) scale3D()
    c) skew3D()
    d) rotate3D()

- All 3D transforms require a "perspective", which refers to depth of content.
- 3D transforms require a combination of styles for defining depth.

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
        body {
            height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
        }
        img {
            transform: scale3d(1,1,1);
            transition: 1s;
        }
        img:hover {
            transform: scale3d(2,2,4);
            perspective: 50px;
            transition: 3s;
            box-shadow: 15px 15px 2px black;
        }
    </style>
</head>
<body>
    <img src="../public/images/women-fashion.jpg" width="150" height="200">
</body>
</html>

Task: Design a cube with 5 sides, div with background color or image.

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
        body {
            height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
        }
        .box-1 {
            width: 200px;
            height: 150px;
            border:3px solid black;
            transform: skewX(-40deg) rotateY(40deg);
            background-color: red;
        }
        .box-2 {
            width: 150px;
            height: 200px;
            border:3px solid black;
            background-color: yellow;
            transform: translateX(-40px);
        }
        .box-3 {
            width: 150px;
            height: 200px;
            border:3px solid black;
            background-color: blue;
            transform: translateX(-40px);
        }
    </style>
</head>
<body>
    <div>
        <div class="box box-1"></div>
        <div class="box box-2"></div>
        <div class="box box-3"></div>
    </div>
</body>
</html>
                           CSS Transitions
- Transition controls animation styles for elements.
- It includes
    a) transition-duration            : total time taken to transform
    b) transition-delay                : the delay time to start transform.
    c) transition-property            : defines the property that have to use transition.
    d) transition-timing-function         : it sets pre-defined animation function.
    e) transition [short hand]


Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
        body {
            height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
        }
        img {
            width: 100px;
            height: 100px;
            transition-duration: 2s;
        }
        img:hover {
            width: 400px;
            height: 400px;
            border-radius: 400px;
            border: 5px solid red;
            transition-duration: 5s;
            transition-property: width, height;
            transition-timing-function: ease-in;
        }
    </style>
</head>
<body>
    <img src="../public/images/women-fashion.jpg">
</body>
</html>

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
        body {
            height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
        }
        img {
            width: 50px;
            height: 50px;
            transition-duration: 2s;
            transition-timing-function: steps(4);
        }
        img:hover {
            width: 500px;
            height: 500px;
            border-radius: 500px;
            border: 5px solid red;
            transition-duration: 5s;
            transition-timing-function:steps(6);
        }
    </style>
</head>
<body>
    <img src="../public/images/women-fashion.jpg">
</body>
</html>

                        CSS Keyframes

6/05
====

CSS Keyframes

- Animation comprises of 2 types of frames.
    a) Static Frame
    b) Key Frame
- Static frame contains content that is same across timeline.
- Keyframe changes the content from start to end.
- Keyframe comprises of
    a) Initial State
    b) Final State
    c) Break Point
- Initial State is defined using "from"
- Final State is defined using "to"
- Break Point can be from 1% to 100%

Syntax:
    @keyframes  anyName
     {
         from {
          attributes;
         }
         break%{
              attributes;
         }
        to {
           attributes;
        }
    }

- You can apply keyframe to any element by using animation attributes
    a) animation-name
    b) animation-duration
    c) animation-delay
    d) animation-iteration-count
    e) animation-timing-function
    f) animation-direction

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <style>
        body {
            height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
        }
        @keyframes Blink {
            from{
                opacity: 0;
                transform: scale(0.1);
            }
            20%{
                transform: rotate(180deg);
            }
            70% {
                transform: skew(20deg);
            }
            to{
                opacity: 1;
                transform: scale(1);
            }
        }
        .bi-star-fill {
            animation-name: Blink;
            animation-duration: 1s;
            animation-iteration-count: infinite;
        }
        img {
            animation-name: Blink;
            animation-duration: 3s;
            animation-iteration-count: infinite;
            animation-direction: alternate;
        }
    </style>
</head>
<body style="background-color: black; color:white">
    <div>
        <div class="bi bi-star-fill" style="font-size: 50px;"></div>
        <div><img src="../public/images/women-fashion.jpg" width="50" height="50"> </div>
    </div>
</body>
</html>

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <style>

        @keyframes Spin {

            from {
                transform: rotate(0deg);
            }
            to {
                transform: rotate(360deg);
            }

        }


        body {
            height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
        }
        .spinner {
            border-left: 15px solid white;
            border-right: 15px solid white;
            border-top: 15px solid white;
            border-bottom: 15px solid red;
            width: 100px;
            height: 100px;
            border-radius: 100px;
            animation-name: Spin;
            animation-duration: 1s;
            animation-iteration-count: infinite;
            animation-timing-function: linear;
        }
    </style>
</head>
<body style="background-color: black; color:white">
    <div>
        <div class="spinner"></div>
    </div>
</body>
</html>

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <style>

        @keyframes Spin {

            from {
                transform: rotate(0deg);
            }
            to {
                transform: rotate(360deg);
            }

        }


        body {
            height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
        }
        img {
            animation-name: Spin;
            animation-duration: 2s;
            animation-iteration-count: infinite;
            animation-timing-function: linear;
        }
        img:active {
            animation-duration: 500ms;
        }
    </style>
</head>
<body>
    <div>
        <img src="../public/images/fan.png">
    </div>
</body>
</html>

                    https://cssloaders.github.io/

                             CSS Media Query

- It is required to design responsive page.
- CSS media query comprises of specification about media type and condition.

Syntax:
    @media  type  and  (condition)
     {
     }

- "type" refers to screen & print.
- condition is a query that contains attributes
    a) width
    b) min-width
    c) max-width
    d) orientation [ landscape, portrait ]

- "width" specifies exactly defined units.

          width:600px;            exactly at 600px

- "min-width" refers to value starting from specified up to end.

          min-width:600px;        starting from 600px up to end

- "max-width" refers to value starting from 0 up to specified

          max-width:600px;        starting from 0 up to 600px

Syntax:
    @media  screen  and (min-width:600px)
    {
    }

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <style>
         header {
            font-size: 20px;
            font-family: Arial;
            display: flex;
            justify-content: space-between;
            padding: 20px;
            background-color: black;
            color: white;
         }
         button {
            background-color: white;
            border:none;
         }
         nav span {
            padding-right: 20px;
         }
         @media screen and (max-width:599px){
             nav {
                display: none;
             }
         }
         @media screen and (min-width:600px){
             nav {
                display: inline;
             }
             button {
                display: none;
             }
         }
    </style>
</head>
<body>
    <header>
        <div>
           <span>Shopper.</span>
        </div>
        <nav>
            <span>Home</span>
            <span>Shop</span>
            <span>Pages</span>
            <span>Blog</span>
        </nav>
        <div>
            <button class="bi bi-justify"></button>
        </div>
    </header>
</body>
</html>

Summary:
- CSS Integration
    a) Inline
    b) Embedded
    c) External File
- Media Type
- MIME Type
- Minification
- CSS Units
- CSS Colors
- CSS Rules
- CSS Selectors
- CSS Box Model
- CSS Positions
- CSS Z-Index
- CSS Float
- CSS Display
- CSS Background
- CSS Text Styles
- CSS List Style
- CSS Transforms
- CSS Transition
- CSS Keyframes
- CSS Animations
- CSS Media Queries

                                 Bootstrap
- It is a toolkit used for building responsive and interactive UI.
- You can build fast by using pre-built components, grid-system and layouts.
- Bootstrap up to version 4 require jQuery plugin.
- Bootstrap 5 doesn't require a jQuery plugin, it uses directly JavaScript.
- Bootstrap styles are configured using "Sass" language.
- It is an open source and allows to customize.
- It is cross browser compatible.

Setup Bootstrap 5:

    > npm install bootstrap  bootstrap-icons --save

Enable Bootstrap:

<head>
<link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
<link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
<script src="../node_modules/bootstrap/dist/js/bootstrap.bundle.js"></script>
</head>

7/05
=====
- Bootstrap provides pre-defined classes for various styles.
- It allows to reuse and customize according to requirements.

Bootstrap Margins:

        .m-{ }        margin all directions  {1 to 4}
        .mt-{ }        top margin
        .mb-{ }        bottom margin
        .my-{ }        top and bottom margin
        .ms-{ }        left margin [start]
        .me-{ }        right margin [end]
        .mx-{ }        left & right margin


Bootstrap Padding:

        .p-{ }
        .pt-{ }
        .pb-{ }
        .py-{ }
        .ps-{ }
        .pe-{ }
        .px-{ }

Bootstrap Border:

        .border
        .border-{size}            1 to 4
        .border-{contextual}     primary, secondary, success, danger, warning etc.

Border Radius:

        .rounded
        .rounded-{size}        1 to 4
        .rounded-pill
        .rounded-circle

Width & Height:
       
        .w-{ }        25, 50, 75, 100
        .h-{ }            25, 50, 100

Background & Text Color

        .bg-{contextual}
        .text-{contextual}

Text Styles

        .fs-{ }        font size 1 to 7
        .h{ }            heading size from 1 to 6
        .fw-bold
        .fst-italic
        .text-center | end | start | justify
        .text-decoration-underline | overline | line-through | none

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Bootstrap</title>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <script src="../node_modules/bootstrap/dist/js/bootstrap.bundle.js"></script>
</head>
<body>
    <div class="ms-4 mt-4 me-4 rounded rounded-4 border border-3 text-center border-danger p-4 w-25 bg-dark text-warning">
        <div class="h1 text-center py-4">Bootstrap</div>
        <img src="../public/images/women-fashion.jpg" class="rounded  rounded-circle border border-warning border-4" width="200" height="200">
        <p class="fs-4 fw-bold text-decoration-underline">Components & Plugins</p>
        <dl class="text-start">
            <dt>Components</dt>
            <dd>Navbar</dd>
            <dd>Carousel</dd>
            <dd>Alerts</dd>
        </dl>
    </div>
</body>
</html>

Bootstrap Display

    .d-none
    .d-block
    .d-inline
    .d-inline-block
    .d-flex
    .flex-wrap
    .flex-row
    .flex-column
    .justify-content-start | end | center | space-between | space-around | space-evenly
    .align-items-start | end | center

Ex:
<div class="d-flex justify-content-center align-items-center" style="height:100vh">
        <img src="../public/images/women-fashion.jpg" width="200" height="200" class="border border-2 border-warning rounded rounded-circle">
    </div>

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Bootstrap</title>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <script src="../node_modules/bootstrap/dist/js/bootstrap.bundle.js"></script>
    <style>
        .box {
            width: 100px;
            height: 100px;
            border:1px solid gray;
        }
    </style>
</head>
<body>
    <div class="p-4 m-4 d-flex flex-row justify-content-between flex-wrap">
        <div class="box"></div>
        <div class="box"></div>
        <div class="box"></div>
        <div class="box"></div>
        <div class="box"></div>
        <div class="box"></div>
        <div class="box"></div>
        <div class="box"></div>
        <div class="box"></div>
    </div>
</body>
</html>

Bootstrap Grid

    .row
    .col
    .col-{size}      1 to 12

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Bootstrap</title>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <script src="../node_modules/bootstrap/dist/js/bootstrap.bundle.js"></script>
    <style>
        .box {
            width: 100px;
            height: 100px;
            border:1px solid gray;
        }
    </style>
</head>
<body>
    <div class="row border m-1 border-4 border-danger p-1">
        <div class="col-3 p-4 border border-warning border-2">
            col-1
        </div>
        <div class="col-6 p-4 border border-warning border-2">
            col-2
        </div>
        <div class="col-3 p-4 border border-warning border-2">
            col-2
        </div>
    </div>
</body>
</html>

Bootstrap Float

    .float-start
    .float-end

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Bootstrap</title>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <script src="../node_modules/bootstrap/dist/js/bootstrap.bundle.js"></script>
</head>
<body class="bg-secondary">
    <div class="m-4 p-4 bg-white">
        <div class="fs-4 fw-bold text-center">Personal Loan EMI Calculator</div>
        <div class="row my-4">
            <div class="col">
                Amount you need <input type="text" size="8">
            </div>
            <div class="col">
                for <input type="text" size="2"> years
            </div>
            <div class="col">
                interest rate <input type="text" size="2"> %
            </div>
        </div>
        <div class="row my-4">
            <div class="col">
                <input type="range" min="1" max="100" value="20" class="w-100">
                <div>
                    <span>&#8377; 1,00,000/-</span>
                    <span class="float-end">&#8377; 10,00,000/-</span>
                </div>
            </div>
            <div class="col">
                <input type="range" value="2" class="w-100">
                <div>
                    <span>1</span>
                    <span class="float-end">5</span>
                </div>
            </div>
            <div class="col">
                <input type="range" value="10" class="w-100">
                <div>
                    <span>10.45%</span>
                    <span class="float-end">18.45%</span>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col">
                <button class="btn btn-primary float-end">Calculate</button>
            </div>
        </div>
    </div>
</body>
</html>

Bootstrap Position:

    .position-static
    .position-absolute
    .position-fixed
    .position-relative
    .position-sticky
    .top-{0,50,100}
    .end-{0,50,100}
    .start-{0,50,100}
    .bottom-{0, 50, 100}
Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Bootstrap</title>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <script src="../node_modules/bootstrap/dist/js/bootstrap.bundle.js"></script>
</head>
<body>
   <div style="background-image: url('../public/images/women-fashion.jpg'); background-size: cover ; height: 400px;" class="w-50 position-relative">
        <div class="bg-danger position-absolute end-0 top-0 rounded rounded-circle text-center text-white p-1" style="width:60px; height: 60px;">20% OFF</div>
   </div>
   <p>Lorem, ipsum dolor sit amet consectetur adipisicing elit. Sapiente saepe in mollitia dolore. Reprehenderit perspiciatis sunt consectetur similique, repellat sint accusamus, cupiditate nostrum iusto praesentium asperiores exercitationem quidem officiis quasi! Lorem ipsum dolor sit amet consectetur adipisicing elit. Rerum quos vel suscipit voluptates exercitationem nobis assumenda perspiciatis quibusdam odio, ut illum nam? Amet quae ipsam iure debitis quod provident non.</p>
   <h1 class="bg-dark text-white p-2 position-sticky top-0">News Updates</h1>
   <p>Lorem, ipsum dolor sit amet consectetur adipisicing elit. Sapiente saepe in mollitia dolore. Reprehenderit perspiciatis sunt consectetur similique, repellat sint accusamus, cupiditate nostrum iusto praesentium asperiores exercitationem quidem officiis quasi! Lorem ipsum dolor sit amet consectetur adipisicing elit. Rerum quos vel suscipit voluptates exercitationem nobis assumenda perspiciatis quibusdam odio, ut illum nam? Amet quae ipsam iure debitis quod provident non.</p>

</body>
</html>
   
Button Classes

    .btn
    .btn-{contextual}
    .btn-{size} sm | lg
    .btn-outline-{contextual}
    .btn-group | btn-group-vertical
    .btn-toolbar
    .btn-link
    .btn-close

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Bootstrap</title>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <script src="../node_modules/bootstrap/dist/js/bootstrap.bundle.js"></script>
</head>
<body>
   <dl class="ms-4">
      <nav class="btn-toolbar bg-danger mt-4">
         <div class="btn-group">
            <button class="btn btn-danger bi bi-house-door"> Home</button>
            <button class="btn btn-danger bi bi-globe"> Pages</button>
            <button class="btn btn-danger bi bi-cart4"> Shop</button>
         </div>
      </nav>
      <dt>Button Base</dt>
      <dd>
        <button class="btn">Submit</button>
      </dd>
      <dt>Contextual</dt>
      <dd>
        <button class="btn btn-primary">Insert</button>
        <button class="btn btn-warning">Update</button>
        <button class="btn btn-danger">Delete</button>
      </dd>
      <dt>Outline Contextual</dt>
      <dd>
        <button class="btn btn-outline-primary">Insert</button>
        <button class="btn btn-outline-warning">Update</button>
        <button class="btn btn-outline-danger">Delete</button>
      </dd>
      <dt>Size</dt>
      <dd>
        <button class="btn btn-outline-primary">Insert</button>
        <button class="btn btn-outline-warning btn-sm">Update</button>
        <button class="btn btn-outline-danger btn-lg">Delete</button>
      </dd>
      <dt>Group</dt>
      <dd class="btn-group-vertical">
         <button class="bi bi-play btn btn-danger"></button>
         <button class="bi bi-pause btn btn-danger"></button>
         <button class="bi bi-stop btn btn-danger"></button>
      </dd>
      <dt>Special</dt>
      <dd>
        <button class="btn btn-link">Signout</button>
        <button class="btn btn-close"></button>
      </dd>
   </dl>
</body>
</html>

8/05
====

Bootstrap Form Classes

    .form-control        textbox, password, number, url, email, date etc.
    .form-select        dropdown
    .form-range        range input
    .form-control-color    color input
    .form-control-file    file input
    .form-label        label
    .form-check-input    radio & check box
    .form-check-label    label for radio & checkbox
    .form-switch        container that have checkbox or radio

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <script src="../node_modules/bootstrap/dist/js/bootstrap.bundle.js"></script>
</head>
<body class="d-flex justify-content-center">
    <form class="mt-4 border border-2 rounded p-4 w-25">
        <div class="bi my-2 text-center bi-person-fill fs-5 fw-bold"> Register User</div>
        <div class="mb-2">
            <label class="form-label">User Name</label>
            <div>
                <input type="text" placeholder="Your name" class="form-control">
            </div>
        </div>
        <div class="mb-2">
            <label class="form-label">Password</label>
            <div>
                <input type="password" placeholder="Your password" class="form-control">
            </div>
        </div>
        <div class="mb-2">
            <label class="form-label">Your City</label>
            <div>
                <select class="form-select">
                    <option>Select City</option>
                    <option>Delhi</option>
                    <option>Hyd</option>
                </select>
            </div>
        </div>
        <div class="mb-2">
            <label class="form-label">Rating</label>
            <div>
                <input type="range" class="form-range">
            </div>
        </div>
        <div class="mb-2">
            <label class="form-label">Subscribe</label>
            <div class="form-switch">
                <input class="form-check-input" type="checkbox"> <label class="form-check-label"> Yes </label>
            </div>
        </div>
        <div class="mb-2">
            <button class="btn btn-warning w-100">Register</button>
        </div>
    </form>
</body>
</html>

Bootstrap Input Group

    .input-group
    .input-group-sm | lg
    .input-group-text

Syntax:
    <div class="input-group">
        <span class="input-group-text"> </span>
        ... elements..
    </div>

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <script src="../node_modules/bootstrap/dist/js/bootstrap.bundle.js"></script>
</head>
<body>
    <div class="m-4 p-4 w-25">
        <div>
            <h4>Amazon</h4>
            <div class="input-group">
                <select class="input-group-text">
                    <option>All</option>
                </select>
                <input type="text" class="form-control" placeholder="Search Amazon.in">
                <button class="bi bi-search btn btn-warning"></button>
            </div>
            <h4>Register User</h4>
            <div class="mb-4 input-group">
                <span class="bi input-group-text bi-person-fill"></span>
                <input type="text" class="form-control" placeholder="User Name">
                <span class="input-group-text">
                    <input type="checkbox" class="form-check-input">
                </span>
            </div>
            <div class="input-group">
                <span class="bi input-group-text bi-key-fill"></span>
                <input type="password" class="form-control" placeholder="Password">
                <span class="input-group-text">
                    <input type="checkbox" class="form-check-input">
                </span>
            </div>
        </div>
    </div>
</body>
</html>

Bootstrap Table Classes

    .table
    .table-hover
    .table-bordered
    .table-borderless
    .table-striped
    .table-responsive [ bootstrap 5 uses for container that have table ]
    .table-dark
    .table-{contextual}

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <script src="../node_modules/bootstrap/dist/js/bootstrap.bundle.js"></script>
</head>
<body class="m-4">
    <h3>Products Table</h3>
    <div class="table-responsive">
        <table class="table table-hover table-striped table-bordered">
            <thead class="table-dark">
                <tr>
                    <th>Name</th>
                    <th>Price</th>
                    <th>Stock</th>
                    <th>Actions</th>
                    <th>Name</th>
                    <th>Price</th>
                    <th>Stock</th>
                    <th>Actions</th>
                    <th>Name</th>
                    <th>Price</th>
                    <th>Stock</th>
                    <th>Actions</th>
                    <th>Name</th>
                    <th>Price</th>
                    <th>Stock</th>
                    <th>Actions</th>
                    <th>Name</th>
                    <th>Price</th>
                    <th>Stock</th>
                    <th>Actions</th>
                    <th>Name</th>
                    <th>Price</th>
                    <th>Stock</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody class="table-success">
                <tr>
                    <td>&nbsp;</td>
                    <td>&nbsp;</td>
                    <td>&nbsp;</td>
                    <td>&nbsp;</td>
                </tr>
                <tr>
                    <td>&nbsp;</td>
                    <td>&nbsp;</td>
                    <td>&nbsp;</td>
                    <td>&nbsp;</td>
                </tr>
                <tr>
                    <td>&nbsp;</td>
                    <td>&nbsp;</td>
                    <td>&nbsp;</td>
                    <td>&nbsp;</td>
                </tr>
                <tr>
                    <td>&nbsp;</td>
                    <td>&nbsp;</td>
                    <td>&nbsp;</td>
                    <td>&nbsp;</td>
                </tr>
                <tr>
                    <td>&nbsp;</td>
                    <td>&nbsp;</td>
                    <td>&nbsp;</td>
                    <td>&nbsp;</td>
                </tr>
                <tr>
                    <td>&nbsp;</td>
                    <td>&nbsp;</td>
                    <td>&nbsp;</td>
                    <td>&nbsp;</td>
                </tr>
            </tbody>
        </table>
    </div>
</body>
</html>

Bootstrap Pagination

    .pagination
    .page-item
    .page-link
    .page-item-text
    .active
    .disabled
    .pagination-sm | lg

Syntax:
  <ul class="pagination">
    <li class="page-item">
    <a class="page-link">
       <span class="page-item-text"> 1 </span>
    </a>
    </li>
  </ul>

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <script src="../node_modules/bootstrap/dist/js/bootstrap.bundle.js"></script>
</head>
<body class="m-4">
    <h3>Products Table</h3>
    <div class="table-responsive">
        <table class="table table-hover table-striped table-bordered">
            <thead class="table-dark">
                <tr>
                    <th>Name</th>
                    <th>Price</th>
                    <th>Stock</th>
                    <th>Actions</th>
                   
                </tr>
            </thead>
            <tbody class="table-success">
                <tr>
                    <td>&nbsp;</td>
                    <td>&nbsp;</td>
                    <td>&nbsp;</td>
                    <td>&nbsp;</td>
                </tr>
                <tr>
                    <td>&nbsp;</td>
                    <td>&nbsp;</td>
                    <td>&nbsp;</td>
                    <td>&nbsp;</td>
                </tr>
                <tr>
                    <td>&nbsp;</td>
                    <td>&nbsp;</td>
                    <td>&nbsp;</td>
                    <td>&nbsp;</td>
                </tr>
                <tr>
                    <td>&nbsp;</td>
                    <td>&nbsp;</td>
                    <td>&nbsp;</td>
                    <td>&nbsp;</td>
                </tr>
                <tr>
                    <td>&nbsp;</td>
                    <td>&nbsp;</td>
                    <td>&nbsp;</td>
                    <td>&nbsp;</td>
                </tr>
                <tr>
                    <td>&nbsp;</td>
                    <td>&nbsp;</td>
                    <td>&nbsp;</td>
                    <td>&nbsp;</td>
                </tr>
            </tbody>
            <tfoot>
                <tr>
                    <td colspan="4">
                        <ul class="pagination pagination-lg">
                            <li class="page-item"><a class="page-link"><span class="page-item-text">&laquo;</span></a></li>
                            <li class="page-item"><a class="page-link"><span class="page-item-text">1</span></a></li>
                            <li class="page-item"><a class="page-link"><span class="page-item-text">2</span></a></li>
                            <li class="page-item active"><a class="page-link"><span class="page-item-text">3</span></a></li>
                            <li class="page-item"><a class="page-link"><span class="page-item-text">4</span></a></li>
                            <li class="page-item disabled"><a class="page-link"><span class="page-item-text">5</span></a></li>
                            <li class="page-item"><a class="page-link"><span class="page-item-text">&raquo;</span></a></li>
                        </ul>
                    </td>
                </tr>
            </tfoot>
        </table>
    </div>
</body>
</html>

Bootstrap Progress Bar

    .progress-bar
    .progress
    .progress-bar-animated
    .progress-bar-striped
   
Note: Progress bar value is shown by using style set with "width" in %.

Syntax:
    <div class="progress">
       <div class="progress-bar" style="width:30%">
       </div>
    </div>

Bootstrap Spinners

    .spinner-bordered
    .spinner-bordered-sm | lg
    .spinner-grow
    .spinner-grow-sm | lg

Syntax:
    <div class="spinner-bordered text-success"> </div>

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <script src="../node_modules/bootstrap/dist/js/bootstrap.bundle.js"></script>
</head>
<body class="m-4">
    <h3>Progress</h3>
    <div class="progress">
        <div class="progress-bar bg-success progress-bar-striped progress-bar-animated" style="width: 30%;">
                30% completed
        </div>
        <div class="progress-bar mx-1 bg-warning progress-bar-striped progress-bar-animated" style="width: 40%;">
                40% remaining
        </div>
        <div class="progress-bar bg-dark progress-bar-striped progress-bar-animated" style="width: 30%;">
            30% N/A
        </div>
    </div>
    <h3>Spinners</h3>
    <span class="spinner-border text-success"></span>
    <button class="btn btn-primary">
        <span class="spinner-border spinner-border-sm"></span>
        <span>Loading</span>
    </button>
    <button class="btn btn-primary">
        <span class="spinner-grow spinner-grow-sm"></span>
        <span>Loading</span>
    </button>
</body>
</html>

Bootstrap Badge

    .badge
    .text-{contextual}
    .bg-{contextual}

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <script src="../node_modules/bootstrap/dist/js/bootstrap.bundle.js"></script>
</head>
<body class="m-4">
     <button class="bi bi-cart4 btn btn-warning position-relative"> <span class="badge bg-danger rounded rounded-circle position-absolute">2</span> </button>
     <br><br>
     <button class="btn btn-dark"> <span class="badge bg-light text-dark rounded rounded-circle"><span class="bi bi-bell-fill"></span></span> Subscribe </button>
     <ul class="">

     </ul>
</body>
</html>

Bootstrap List Style

    .list-unstyled
    .list-group
    .list-group-item
    .list-group-item-text
    .list-group-horizontal

Syntax:
    <ul  class="list-group">
       <li class="list-group-item"> </li>
    </ul>

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <script src="../node_modules/bootstrap/dist/js/bootstrap.bundle.js"></script>
</head>
<body class="m-4">
     <h2>Table of Contents</h2>
     <ul class="list-group">
        <li class="list-group-item d-flex justify-content-between list-group-item-danger"><span class="list-group-item-text">Introduction to Web</span> <span class="badge bg-dark rounded rounded-circle">2</span> </li>
        <li class="list-group-item d-flex justify-content-between list-group-item-success"><span class="list-group-item-text">Web Terminology</span> <span class="badge bg-dark rounded rounded-circle">5</span></li>
        <li class="list-group-item d-flex justify-content-between list-group-item-warning"><span class="list-group-item-text">Web Application Architecture</span> <span class="badge bg-dark rounded rounded-circle">7</span></li>
        <li class="list-group-item d-flex justify-content-between list-group-item-info"><span class="list-group-item-text">Servers & Browser</span><span class="badge bg-dark rounded rounded-circle">9</span></li>
     </ul>
</body>
</html>

9/05
=====

Bootstrap Cards
        .card
        .card-header
        .card-body
        .card-footer
        .card-title
        .card-subtitle
        .card-img-top
        .card-img-bottom
        .card-img-overlay

Syntax:
    <div class="card">
        ... card header ...
        .... card body....
        ... card footer...
    </div>

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
     <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <script src="../node_modules/bootstrap/dist/js/bootstrap.bundle.js"></script>
</head>
<body>
    <main class="m-4 d-flex">
        <div class="card p-2 m-2" style="width:300px">
            <img src="../public/images/data sci.png" class="card-img-top" height="130">
            <div class="card-header">
                <h2 class="card-title">Data Science</h2>
                <p class="card-subtitle">By Mr. John</p>
            </div>
            <div class="card-body">
                <ul>
                    <li>Topic-1</li>
                    <li>Topic-2</li>
                    <li>Topic-3</li>
                </ul>
            </div>
            <div class="card-footer">
                <button class="btn btn-warning w-100"> Join Course </button>
            </div>
        </div>

                <div class="card p-2 m-2" style="width:300px">
            <img src="../public/images/power-bi.png" class="card-img-top" height="130">
            <div class="card-header">
                <h2 class="card-title">Power BI</h2>
                <p class="card-subtitle">By Mr. John</p>
            </div>
            <div class="card-body">
                <ul>
                    <li>Topic-1</li>
                    <li>Topic-2</li>
                    <li>Topic-3</li>
                </ul>
            </div>
            <div class="card-footer">
                <button class="btn btn-warning w-100"> Join Course </button>
            </div>
        </div>
    </main>
</body>
</html>

Bootstrap Containers
 - Containers are pre-defined with media queries.
 - They are design with various view ports and queries.

        .container        ]   mobile
        .container-sm        ]   mobile
        .container-md        ]   tab
        .container-lg        ]   pc
        .container-xl        ]   laptop
        .container-xxl        ]   laptop wide screen
        .container-fluid    ]   responsive

Syntax:
    <body  class="container-fluid">


                        Bootstrap Components
- Components are building blocks for UI.
- They enable easy reusability, separation and extensibility.
- A component comprises of pre-defined
    a) Design
    b) Styles
    c) Functionality

1. Alerts
- Alert is an embedded message box in page.
- It can dynamically show or hide messages in page.

Classes:
    .alert
    .alert-dismissible
    .alert-{contextual}
    .alert-title
    .alert-link

Attributes [dynamic]
    data-bs-dismiss        : It is used to close any component.
                          It is defined for clickable elements likes buttons.

Syntax:
    <div class="alert alert-dismissible">
        ... your content..
       
        <button data-bs-dismiss="alert"> OK </button>
    </div>

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <script src="../node_modules/bootstrap/dist/js/bootstrap.bundle.js"></script>
</head>
<body class="container-fluid">
    <h2>Alerts</h2>
    <aside class="alert alert-dismissible w-25">
        <button class="btn btn-close" data-bs-dismiss="alert"></button>
        <div>Ads.</div>
        <img src="../public/images/a4.jpg" width="200" height="200">
        <p>Offers..</p>
    </aside>
    <div class="alert alert-success alert-dismissible w-50">
        <button data-bs-dismiss="alert" class="btn btn-close"></button>
        <h3 class="alert-title">Registered successfully</h3>
        <p>Your account created and an activation link sent to your email.</p>
        <a class="alert-link" href="#">Help?</a>
        <br><br>
        <button data-bs-dismiss="alert" class="btn btn-success">OK</button>
    </div>
    <div class="alert alert-dismissible alert-danger w-25">
        <h3>Invalid Credentials</h3>
        <p>Please verify your login details</p>
        <button class="btn btn-danger" data-bs-dismiss="alert"> OK </button>
    </div>
</body>
</html>

2. Modals
- Modal is a dialog that pop-up with content in backdrop.
- Modal is hidden and you have to invoke using JS attributes.
- Modal can close using interactive buttons or with backdrop click.

Classes:
    .modal
    .modal-dialog
    .modal-content
    .modal-header
    .modal-body
    .modal-footer
    .modal-fullscreen
    .modal-dialog-centered
    .modal-dialog-scrollable

Attributes
    data-bs-target            : It refers to the ID of element to open
    data-bs-toggle            : It define on click to open specific component
    data-bs-dismiss        : It is used to close component

Syntax:
    <div class="modal">
       <div class="modal-dialog">
        <div class="modal-content">
            ... header, body, footer
        </div>
      </div>
     </div>

- Every modal must have a reference ID.
- You can access the ID using "data-bs-target".

Note: You can apply ".fade" class to set a fading animation for modal.
      Bootstrap 5 doesn't support nested modals.

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
     <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <script src="../node_modules/bootstrap/dist/js/bootstrap.bundle.js"></script>

</head>
<body class="container-fluid">
    <button data-bs-toggle="modal" data-bs-target="#login" class="btn btn-primary mt-3">Login</button>
    <button data-bs-toggle="modal" data-bs-target="#ads" class="btn btn-danger mt-3">Ads</button>
    <div class="modal fade" id="ads">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h3>Summer Sale</h3>
                    <button class="btn btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <img src="../public/images/a4.jpg" width="200" height="200">
                </div>
            </div>
            </div>
        </div>
    </div>
    <div class="modal fade" id="login">
        <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="bi bi-person-circle"> User Login</h3>
                    <button class="btn btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <dl>
                        <dt>User name</dt>
                        <dd><input type="text" class="form-control"></dd>
                        <dt>Password</dt>
                        <dd><input type="password" class="form-control"></dd>
                        <dt>User name</dt>
                        <dd><input type="text" class="form-control"></dd>
                        <dt>Password</dt>
                        <dd><input type="password" class="form-control"></dd>
                        <dt>User name</dt>
                        <dd><input type="text" class="form-control"></dd>
                        <dt>Password</dt>
                        <dd><input type="password" class="form-control"></dd>
                        <dt>User name</dt>
                        <dd><input type="text" class="form-control"></dd>
                        <dt>Password</dt>
                        <dd><input type="password" class="form-control"></dd>
                        <dt>User name</dt>
                        <dd><input type="text" class="form-control"></dd>
                        <dt>Password</dt>
                        <dd><input type="password" class="form-control"></dd>
                    </dl>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary mx-2">Login</button>
                    <button class="btn btn-danger" data-bs-dismiss="modal">Cancel</button>
                </div>
            </div>
        </div>
    </div>
</body>
</html>

3. Offcanvas
- It is similar to modal but supports various orientations.
- It can open with content in backdrop.

Classes:
    .offcanvas
    .offcanvas-start
    .offcanvas-end
    .offcanvas-top
    .offcanvas-bottom
    .offcanvas-header
    .offcanvas-body
    .offcanvas-title

Attributes:
    data-bs-target
    data-bs-toggle
    data-bs-dismiss

Syntax:
    <div class="offcanvas offcanvas-start">
       <div class="offcanvas-header">
       </div>
       <div class="offcanvas-body">
      </div>
       </div>

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
      <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <script src="../node_modules/bootstrap/dist/js/bootstrap.bundle.js"></script>

</head>
<body class="container-fluid">
    <header class="mt-4 p-3 border border-2">
        <nav class="d-flex justify-content-between">
            <button data-bs-target="#navbar" data-bs-toggle="offcanvas" class="bi bi-justify fs-5 btn btn-light"> Shopper </button>
            <button data-bs-target="#cart" data-bs-toggle="offcanvas" class="bi bi-cart4 btn btn-warning"></button>
            <div class="offcanvas offcanvas-start" id="navbar">
                <div class="offcanvas-header">
                    <h3>Shopping</h3>
                    <button class="btn btn-close" data-bs-dismiss="offcanvas"></button>
                </div>
                <div class="offcanvas-body">
                    <ul class="list-group">
                        <li class="list-group-item list-group-item-action"> <a>Home</a> </li>
                        <li class="list-group-item list-group-item-secondary"> <a>Electronics</a> </li>
                        <li class="list-group-item list-group-item-success"> <a>Fashion</a> </li>
                        <li class="list-group-item list-group-item-danger"> <a>Footwear</a> </li>
                        <li class="list-group-item list-group-item-warning"> <a>Contact</a> </li>
                    </ul>
                </div>
            </div>

            <div class="offcanvas offcanvas-end" id="cart">
                <div class="offcanvas-header">
                    <h3>Your Cart Items</h3>
                    <button class="btn btn-close" data-bs-dismiss="offcanvas"></button>
                </div>
                <div class="offcanvas-body">
                    <div>
                        <img src="../public/images/a1.jpg" width="100" height="100">
                    </div>
                    <div>
                        <img src="../public/images/a2.jpg" width="100" height="100">
                    </div>
                    <div>
                        <img src="../public/images/a3.jpg" width="100" height="100">
                    </div>
                    <div>
                        <img src="../public/images/a4.jpg" width="100" height="100">
                    </div>

                </div>
            </div>
        </nav>
    </header>
</body>
</html>

10/05
=====

4. Carousel
- It is used to configure sliding and fading content in page.
- It can be defined with auto and manual control.

Basic Carousel Classes:
    .carousel
    .carousel-inner
    .carousel-item

Syntax:
    <div class="carousel">
       <div class="carousel-inner">
        <div class="carousel-item">
        </div>
        ... multiple items...
       </div>
        </div>

- Make sure that any one carousel item is active.

    <div class="carousel-item active">
    </div>

- By default carousel in not defined with animation.
- To start animation you have to define the attribute "data-bs-ride" for carousel.

    <div class="carousel"  data-bs-ride="carousel">
    </div>

- Animation have 2 different effects, you have to define at least any one effect.

    a) slide
    b) carousel-fade

    <div class="carousel slide"> </div>
    <div class="carousel carousel-fade"> </div>

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <script src="../node_modules/bootstrap/dist/js/bootstrap.bundle.js"></script>
</head>
<body class="container-fluid">
    <div class="carousel slide" data-bs-ride="carousel">
        <div class="carousel-inner">
            <div class="carousel-item active">
                <img src="../public/images/slide-1.jpg" height="250" class="w-100 d-block">
            </div>
            <div class="carousel-item">
                <img src="../public/images/slide-2.jpg" height="250" class="w-100 d-block">
            </div>
            <div class="carousel-item">
                <img src="../public/images/slide-3.jpg" height="250" class="w-100 d-block">
            </div>
        </div>
    </div>
</body>
</html>

Carousel Controls:
- Controls allow to navigate between items in a carousel list.
- You can move to previous or next.

Classes:
    .carousel-control-prev
    .carousel-control-prev-icon
    .carousel-control-next
    .carousel-control-next-icon

Attributes
    data-bs-slide="prev"
    data-bs-slide="next"
    data-bs-target="carousel_id"

- You can apply dark theme for controls by using "data-bs-theme=dark".
  You have to set theme for carousel.

    <div class="carousel" data-bs-theme="dark">

- Bootstrap up to 4 version can use "carousel-dark" class. It is now obsolete.
  [Deprecated]

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <script src="../node_modules/bootstrap/dist/js/bootstrap.bundle.js"></script>
</head>
<body class="container-fluid">
    <div class="carousel slide" data-bs-ride="carousel" id="banners">
        <div class="carousel-inner">
            <div class="carousel-item active">
                <img src="../public/images/slide-1.jpg" height="250" class="w-100 d-block">
            </div>
            <div class="carousel-item">
                <img src="../public/images/slide-2.jpg" height="250" class="w-100 d-block">
            </div>
            <div class="carousel-item">
                <img src="../public/images/slide-3.jpg" height="250" class="w-100 d-block">
            </div>
        </div>
        <button data-bs-target="#banners" data-bs-slide="prev" class="carousel-control-prev">
            <span class="carousel-control-prev-icon"></span>
        </button>
        <button data-bs-target="#banners" data-bs-slide="next" class="carousel-control-next">
            <span class="carousel-control-next-icon"></span>
        </button>
    </div>
</body>
</html>

Carousel Indicators:
- Indicators allows random navigation.
- User can navigate to any specific item directly.

Class:
    .carousel-indicators

Attributes:
    data-bs-slide-to="indexNumber"    0 = first
    data-bs-target="carousel_id"

- Make sure that one indicator button is active.

       <button data-bs-slide-to="0" data-bs-target="#banners"  class="active"> </button>

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <script src="../node_modules/bootstrap/dist/js/bootstrap.bundle.js"></script>
</head>
<body class="container-fluid">
    <div class="carousel slide" data-bs-ride="carousel" id="banners">
        <div class="carousel-inner">
            <div class="carousel-item active">
                <img src="../public/images/slide-1.jpg" height="250" class="w-100 d-block">
            </div>
            <div class="carousel-item">
                <img src="../public/images/slide-2.jpg" height="250" class="w-100 d-block">
            </div>
            <div class="carousel-item">
                <img src="../public/images/slide-3.jpg" height="250" class="w-100 d-block">
            </div>
        </div>
        <button data-bs-target="#banners" data-bs-slide="prev" class="carousel-control-prev">
            <span class="carousel-control-prev-icon"></span>
        </button>
        <button data-bs-target="#banners" data-bs-slide="next" class="carousel-control-next">
            <span class="carousel-control-next-icon"></span>
        </button>
        <div class="carousel-indicators">
            <button class="active" data-bs-slide-to="0" data-bs-target="#banners"></button>
            <button data-bs-slide-to="1" data-bs-target="#banners"></button>
            <button data-bs-slide-to="2" data-bs-target="#banners"></button>
        </div>  
    </div>
</body>
</html>

Carousel Timing:
- The animation of slide and fade have default timing for every item.
- You can set custom timing by using the attribute "data-bs-interval" set with milliSeconds.

Syntax:
    <div class="carousel-item" data-bs-interval="4000">
    </div>

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <script src="../node_modules/bootstrap/dist/js/bootstrap.bundle.js"></script>
</head>
<body class="container-fluid">
    <div class="carousel slide" data-bs-ride="carousel" id="banners">
        <div class="carousel-inner">
            <div class="carousel-item active" data-bs-interval="3000">
                <img src="../public/images/slide-1.jpg" height="250" class="w-100 d-block">
            </div>
            <div class="carousel-item" data-bs-interval="1000">
                <img src="../public/images/slide-2.jpg" height="250" class="w-100 d-block">
            </div>
            <div class="carousel-item" data-bs-interval="5000">
                <div class="d-flex bg-secondary justify-content-center align-items-center" style="height: 250px;">
                    <div>
                        <div class="input-group">
                            <input type="email" placeholder="Your email address" class="form-control">
                            <button class="btn btn-danger"> Get Started <span class="bi bi-chevron-right"></span> </button>
                        </div>
                    </div>
                </div>
            </div>
            <div class="carousel-item" data-bs-interval="4000">
                <img src="../public/images/slide-3.jpg" height="250" class="w-100 d-block">
            </div>
        </div>
        <button data-bs-target="#banners" data-bs-slide="prev" class="carousel-control-prev">
            <span class="carousel-control-prev-icon"></span>
        </button>
        <button data-bs-target="#banners" data-bs-slide="next" class="carousel-control-next">
            <span class="carousel-control-next-icon"></span>
        </button>
        <div class="carousel-indicators">
            <button class="active" data-bs-slide-to="0" data-bs-target="#banners"></button>
            <button data-bs-slide-to="1" data-bs-target="#banners"></button>
            <button data-bs-slide-to="2" data-bs-target="#banners"></button>
            <button data-bs-slide-to="3" data-bs-target="#banners"></button>
        </div>  
    </div>
</body>
</html>

5. Collapse
- It is used to show or hide any container dynamically.
- It requires following classes

    .collapse
    .show

Attributes:
    data-bs-target
    data-bs-toggle

Syntax:
    <div class="collapse show">
    </div>

- Every collapse requires an ID to refer.
- The default collapse state is hidden state

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
     <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <script src="../node_modules/bootstrap/dist/js/bootstrap.bundle.js"></script>
</head>
<body class="container-fluid">
    <div class="mt-4">
        <button data-bs-target="#q1" data-bs-toggle="collapse" class="btn btn-dark w-100"> What is Netflix? </button>
        <div class="mt-1 collapse" id="q1">
            <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Est beatae quo aliquam dicta facere perferendis esse rem ab illo inventore perspiciatis incidunt consequuntur voluptatibus, culpa quibusdam explicabo quos. Voluptatibus, facere! Lorem ipsum dolor sit, amet consectetur adipisicing elit. In minima quam mollitia praesentium dolorem quas! A quisquam recusandae amet in quas ratione tempora rerum cupiditate deleniti, eaque harum iste saepe.</p>
        </div>
    </div>
</body>
</html>

6. Accordion
- It is a set of items which you can expand or collapse using Mutex.
- Mutex is mutual exclusion, If any one is expanded then it will collapse all other in the context.

Classes:
    .accordion
    .accordion-item
    .accordion-button
    .accordion-header
    .accordion-body
    .accordion-footer
    .accordion-collapse
   
Attributes
    data-bs-target
    data-bs-toggle
    data-bs-parent [ It is defined for collapse to handle Mutex ]

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
     <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <script src="../node_modules/bootstrap/dist/js/bootstrap.bundle.js"></script>
</head>
<body class="container-fluid">
    <h2 class="text-center">Frequently Asked Questions</h2>
    <div class="accordion" id="faqs">
       <div class="accordion-item">
            <div class="accordion-header">
                <button data-bs-target="#q1" data-bs-toggle="collapse" class="accordion-button">What is Netflix?</button>
            </div>
            <div class="accordion-collapse collapse show" id="q1" data-bs-parent="#faqs">
                <div class="accordion-body">
                    <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Non facere voluptatem consequatur, unde ducimus est velit aspernatur, enim repellat pariatur quo odio libero quasi in eligendi! Dolor doloremque sapiente ab? Lorem ipsum dolor, sit amet consectetur adipisicing elit. Praesentium accusamus iure, quos laudantium eligendi dolorem quia asperiores deleniti, quidem doloribus perspiciatis nobis molestias vitae fuga et, quisquam soluta? Atque, aperiam.</p>
                </div>
            </div>
       </div>
       <div class="accordion-item">
            <div class="accordion-header">
                <button data-bs-target="#q2" data-bs-toggle="collapse" class="accordion-button">How much does Netflix cost?</button>
            </div>
            <div class="accordion-collapse collapse" id="q2" data-bs-parent="#faqs">
                <div class="accordion-body">
                    <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Non facere voluptatem consequatur, unde ducimus est velit aspernatur, enim repellat pariatur quo odio libero quasi in eligendi! Dolor doloremque sapiente ab? Lorem ipsum dolor, sit amet consectetur adipisicing elit. Praesentium accusamus iure, quos laudantium eligendi dolorem quia asperiores deleniti</p>
                </div>
            </div>
       </div>
    </div>
</body>
</html>

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
     <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <script src="../node_modules/bootstrap/dist/js/bootstrap.bundle.js"></script>
</head>
<body class="container-fluid">
    <h2 class="text-center">Frequently Asked Questions</h2>
    <div class="accordion" id="faqs">
       <div class="accordion-item">
            <div class="accordion-header">
                <button data-bs-target="#q1" data-bs-toggle="collapse" class="btn btn-dark w-100">What is Netflix?</button>
            </div>
            <div class="accordion-collapse collapse show" id="q1" data-bs-parent="#faqs">
                <div class="accordion-body">
                    <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Non facere voluptatem consequatur, unde ducimus est velit aspernatur, enim repellat pariatur quo odio libero quasi in eligendi! Dolor doloremque sapiente ab? Lorem ipsum dolor, sit amet consectetur adipisicing elit. Praesentium accusamus iure, quos laudantium eligendi dolorem quia asperiores deleniti, quidem doloribus perspiciatis nobis molestias vitae fuga et, quisquam soluta? Atque, aperiam.</p>
                </div>
            </div>
       </div>
       <div class="accordion-item">
            <div class="accordion-header">
                <button data-bs-target="#q2" data-bs-toggle="collapse" class="btn btn-dark w-100">How much does Netflix cost?</button>
            </div>
            <div class="accordion-collapse collapse" id="q2" data-bs-parent="#faqs">
                <div class="accordion-body">
                    <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Non facere voluptatem consequatur, unde ducimus est velit aspernatur, enim repellat pariatur quo odio libero quasi in eligendi! Dolor doloremque sapiente ab? Lorem ipsum dolor, sit amet consectetur adipisicing elit. Praesentium accusamus iure, quos laudantium eligendi dolorem quia asperiores deleniti</p>
                </div>
            </div>
       </div>
    </div>
</body>
</html>

12/05
=====
7. Dropdown
- It can design a dropdown with complex options.
- It supports icons, images and rich format for options.

Classes:
    .dropdown
    .dropdown-menu
    .dropdown-item
    .dropdown-item-text
    .dropdown-toggle
    .dropdown-divider
    .dropup
    .dropstart
    .dropend

Attributes
    data-bs-target
    data-bs-toggle
    data-bs-theme="dark"

Syntax:
    <div class="dropdown">
        <button class="dropdown-toggle"> Click </button>
        <ul class="dropdown-menu">
        <li> <a class="dropdown-item"> <span class="dropdown-item-text"> Item </span> </a> </li>
        </ul>
    </div>

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
     <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <script src="../node_modules/bootstrap/dist/js/bootstrap.bundle.js"></script>
</head>
<body class="container-fluid">
    <h2>Dropdown</h2>
    <div class="dropend mt-4" data-bs-theme="dark">
        <button data-bs-toggle="dropdown" class="btn btn-dark dropdown-toggle"> <span class="bi bi-person-circle"></span> Login </button>
        <ul class="dropdown-menu">
            <li > <a class="dropdown-item" href="../public/shopper-template.html" target="body-frame"> <span class="bi bi-cart4 dropdown-item-text"> Shop </span> </a> </li>
            <li > <a class="dropdown-item"> <span class="bi bi-heart dropdown-item-text"> Wishlist </span> </a> </li>
            <li > <a class="dropdown-item"> <span class="bi bi-gift dropdown-item-text"> Gift Card </span> </a> </li>
            <li > <a class="dropdown-item"> <span class="bi bi-wallet dropdown-item-text"> Payments </span> </a> </li>
            <li class="dropdown-divider"></li>
            <li > <a class="dropdown-item"> <span class="bi bi-question-circle dropdown-item-text"> Help </span> </a> </li>
        </ul>
    </div>
    <iframe width="100%" height="500" name="body-frame">

    </iframe>
</body>
</html>

8. Nav with Tabs
- It is a navigation between tabs.
- You can display multiple pages content in one page using tab control.

Classes:
    .nav
    .nav-tabs
    .nav-pills
    .nav-menu
    .nav-item
    .nav-link
    .nav-item-text [nav-text]
    .tab-content
    .tab-pane

Attributes:
    data-bs-target [ if your are configuring an anchor elements then href is used]
    data-bs-toggle

Syntax:
    <ul class="nav nav-tabs">
      <li class="nav-item"> <a href="#id" class="nav-link"> </a> </li>
    </ul>
    <div class="tab-content">
      <div class="tab-pane">
      </div>
       ... multiple panes...
    </div>

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
     <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <script src="../node_modules/bootstrap/dist/js/bootstrap.bundle.js"></script>

</head>
<body class="container-fluid">
    <h2>Product Info</h2>
    <ul class="nav nav-tabs">
        <li class="nav-item"><a href="#basic" data-bs-toggle="tab" class="nav-link active"> <span class="nav-text">Basic Details</span> </a> </li>
        <li class="nav-item"><a href="#preview" data-bs-toggle="tab" class="nav-link"> <span class="nav-text">Preview</span></a></li>
        <li class="nav-item"><a href="#offers" data-bs-toggle="tab" class="nav-link"> <span class="nav-text">Offers</span></a></li>
        <li class="nav-item"><a href="#reviews" data-bs-toggle="tab" class="nav-link"> <span class="nav-text">Rating & Reviews</span></a> </li>
    </ul>
    <div class="tab-content mt-4">
        <div class="tab-pane active" id="basic">
            <h2>iPhone 16 (White) 128 GB</h2>
            <div class="fs-2 fw-bold"> &#8377; 69,999</div>
        </div>
        <div class="tab-pane" id="preview">
            <img src="../public/images/iphone-white.jpg" width="200" height="300">
        </div>
        <div class="tab-pane" id="offers">
            <ul>
                <li>Offer-1</li>
                <li>Offer-2</li>
                <li>Offer-3</li>
                <li>Offer-4</li>
                <li>Offer-5</li>
            </ul>
        </div>
        <div class="tab-pane" id="reviews">
            <span class="badge bg-success text-white rounded">4.5 <span class="bi bi-star-fill"></span> </span>

        </div>
    </div>
</body>
</html>

9. Navbar
- It is used to design a responsive navigation bar.
- It can show or hide content using media queries.
- It uses portrait and landscape orientations.
- It also uses min-width and max-width queries.

Classes:
    .navbar
    .navbar-brand
    .navbar-toggler
    .navbar-toggler-icon
    .navbar-nav
    .navbar-collapse
    .nav-menu
    .nav-item
    .nav-link
    .nav-text
    .navbar-expand-{sm | md | lg | xl }
    .navbar-dark | light
    .navbar-{contextual}

Syntax:
  <nav class="navbar navbar-expand-lg navbar-dark bg-success">
    <div class="container-fluid">
         <span class="navbar-brand"> Title </span>
     <button class="navbar-toggler"> </button>
    <div class="navbar-collapse">
       <ul class="navbar-nav">
        <li class="nav-item"> <a class="nav-link"></a></li>
      </ul>
    </div>
    </div>
 </nav>

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
     <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <script src="../node_modules/bootstrap/dist/js/bootstrap.bundle.js"></script>
</head>
<body class="container-fluid">
   <nav class="navbar navbar-dark bg-success navbar-expand-lg">
     <div class="container-fluid">
        <button class="navbar-toggler" data-bs-toggle="collapse" data-bs-target="#menu">
            <span class="navbar-toggler-icon"></span>
        </button>
        <span class="navbar-brand">Shopper.</span>
        <div class="navbar-collapse collapse" id="menu">
            <ul  class="navbar-nav">
                <li class="nav-item"><a class="nav-link"><span class="nav-text"> Home </span></a></li>
                <li class="nav-item"><a class="nav-link"><span class="nav-text"> Shop </span></a></li>
                <li class="nav-item"><a class="nav-link"><span class="nav-text"> Docs </span></a></li>
                <li class="nav-item"><a class="nav-link"><span class="nav-text"> Pages </span></a></li>
                <li class="nav-item"><a class="nav-link"><span class="nav-text"> Blog </span></a></li>
                <li class="nav-item"><a class="nav-link"><span class="nav-text">
                   <div class="input-group">
                        <input type="text" class="form-control" placeholder="Search Shopper.com">
                        <button class="bi bi-search btn btn-warning"></button>
                   </div>    
                </span></a></li>
            </ul>
        </div>
     </div>
   </nav>
</body>
</html>

10. Breadcrumb

Classes:
    .breadcrumb
    .breadcrumb-item

Variable:
    --bs-breadcrumb-divider

Syntax:
    <ul  class="breadcrumb"  style="--bs-breadcrumb-divider: ' > ' ">

       <li class="breadcrumb-item"> </li>
   
    </ul>

getbootstrap.com => docs => scroll spy

14/05
=====

JavaScript

- JavaScript is light weight interpreted and JIT compiled programming language.

    * Light weight allows to use very less memory.
    * Language is translated by using 2 techniques
            a) Interpreted
            b) Compiled
    * Interpreted allows to translate line-by-line of program.
    * Compiled allows to translate all lines simultaneously at the same time.
    * Complied is classified into 2 types
            a) JIT
            b) AOT
    * JIT is Just-In-Time, it compiles only when it is requested.
    * AOT is Ahead-of-Time, it is pre-compiled and ready to render.
    * JavaScript is interpreted by using a "JavaScript Interpreter" in browser.
    * JavaScript is compiled using compilers like "Babel, V8, Node etc."
    * A programming enable communication and interaction between use and
      application.

- JavaScript is a language that supports various programming paradigms, which
  includes structural, functional, imperative, object oriented etc.

    * Paradigm provides distinct set of methods, approach and standards to
      handle interaction.
    * It uses "Multi Paradigm".
    * Hence it is suitable for various types of technologies.

Note: JavaScript is not an OOP language. It supports only few features of OOP.

- JavaScript is a language which is used in various tiers.
- It is used in
    a) Front End
    b) Back End
    c) Database
- It is used
    a) Client Side            [ HTML ]
    b) Server Side            [ Node JS, Next JS]
    c) In Database         [ MongoDB ]
    d) In Action Script         [Animation tools]


JavaScript Client Side:
- A client side script runs on client device.
- It reduces burden on server, by handling various interactions client side.
- JavaScript client side can handle
    a) Browser Interactions  [ BOM ]
    b) Document Interactions [ DOM ]
- Browser Interactions include
    a) window
    b) location
    c) navigator
    d) history etc..
- DOM interactions include
    a) Data Binding
    b) Style Binding
    c) Class Binding
    d) Event Binding
    e) Validations etc.

Evolution of JavaScript:
- CERN [ Council for European Research and Nuclear] labs developed a script called ECMA script for Mosaic Browser in early days of Internet.
- In early 1995  Netscape Communications started a browser called "Netscape Navigator".
- Netscape appointed "Brendan Eich" to develop a script for their browser.
- Brendan Eich designed a script by name "Mocha" later renamed as "Live Script".
- Netscape given the responsibility of Live Script to Sun Microsystems. [Java]
- Sun Microsystems renamed the Live Script as "JavaScript".
- Netscape stopped its services in 2000 and given the responsibility of JavaScript to
  ECMA.
- ECMA named it as  "ECMA Script", Its popular versions are

            ECMAScript 2015        ES5
            ECMAScript 2016        ES6
            ECMAScript 2017        ES7
            ....
            ECMAScript 2024        ES15

15/05
=====

JavaScript with HTML page:
- JavaScript functions can be defined using following techniques
    1. Inline
    2. Embedded
    3. External File

Inline
- JavaScript functions are defined within HTML element.
- It is faster but not good in reusability.

Syntax:
    <button  onclick="function(){}">   </button>

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <h2>Your Ticket</h2>
    <button onclick="window.print()">Print</button>
</body>
</html>

Embedded:
- In this technique JavaScript functions are defined in a <script> container.
- You can embed in head or body section.
- It is slower when compared to inline, but allows to reuse.

Syntax:
    <script>
         function Print()
         {
         }
    </script>

     <button onclick="Print()">

- The MIME type of script can be "text/javascript", "module", "text/babel" etc.
- If you are using JS in browser to interpret then keep the type as "text/javascript".

Syntax:
    <script type="text/javascript">

    </script>

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script type="text/javascript">
        function PrintPage(){
            window.print();
        }
    </script>
</head>
<body>
    <h2>Your Ticket</h2>
    <button onclick="PrintPage()">Print</button>
</body>
</html>

- JavaScript is not a strictly typed language, hence explicitly we have to make it strict.
- Strict mode reduces code in-consistency.
- It is defined by using "use strict" statement.

Syntax:
    <script type="text/javascript">
   
        "use strict";

        .... your logic ....

    </script>

- JavaScript support 2 types of browser code snippets.

    a) Legacy
    b) Modern

- Legacy contains old version related functions.
- Modern have latest version functions.
- If you are writing legacy functions for any older version application, then always
  enclose code in HTML comments.

        <!--    your comments    -->        HTML comments

         //  your comments        -->        JS Single line comments

        /*  
          ... your comments        -->         JS Multiline comments
        */

Syntax:
    <script type="text/javascript">
       
        <!--

            .... your code ....

        -->
   
    </script>

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script type="text/javascript">
       <!--
         "use strict";
        function PrintPage(){
            window.print();
        }
        -->
    </script>
</head>
<body>
    <h2>Your Ticket</h2>
    <button onclick="PrintPage()">Print</button>
</body>
</html>

External File:
- You can configure JS functions in a script file with extension ".js"
- So that you can access and use across pages.
- However using external file will increase number of requests for page and also page load time.

Syntax:
     print.js

     function PrintPage(){
         window.print();
     }

    <head>
        <script src="print.js"> </script>
    </head>
   
    <body>
        <button onclick="PrintPage()"> Print </button>
    </body>

Ex:
1. src/scripts/print.js

 <!--
         "use strict";
        function PrintPage(){
            window.print();
        }
 -->

2. Home.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script type="text/javascript" src="../src/scripts/print.js">
     
    </script>
</head>
<body>
    <h2>Your Ticket</h2>
    <button onclick="PrintPage()">Print</button>
</body>
</html>

Note: You have to compress JavaScript file for production.
      It requires minification tools.

      https://www.toptal.com/developers/javascript-minifier

FAQ: What are the issues with JavaScript?
Ans:
      1. It is not a strongly typed language.
     
            var x = 10;        // x is number
            x = "A";            // x is string valid
            x = true;            // x is Boolean valid

      2. It is not implicitly strictly typed language.

      3. You need explicit strict mode to turn ON.

      4. It is not an OOP language, It supports only few features of OOP.

      5. It is not easy to extend.

      6. It is not having code level security.

      7. It can be blocked by browser.


FAQ: How to check the status of JavaScript in browser?
Ans:  By using  HTML <noscript> element.


Syntax:
    <body>
        <noscript> please enable JavaScript on your browser </noscript>
    </body>

Note: "TypeScript" is an alternative for JavaScript.  
       However browser can't understand directly typescript.
       It is trans compiled into JavaScript.

16/05
=====

Referring HTML elements using JavaScript:

1. BOM & DOM hierarchy
- JavaScript have Browser Object Model & Document Object Model.
- HTML page presents its elements in a DOM hierarchy.
- JavaScript can use the same hierarchy to access elements.

Syntax:
    window.document.forms[].elements[]
    window.document.images[]

    [ ]    => refers to a collection of elements starting with index 0.

- DOM reference is native for browser and faster in interaction.
- However referring index number is not good when design changes regularly. As you have to update index number every time when design changed.

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
        function BodyLoad(){
            window.document.images[0].src = "../public/images/women-fashion.jpg";
            window.document.forms[0].elements[2].value = "Login";
            window.document.forms[1].elements[1].value = "Register";
        }
    </script>
</head>
<body onload="BodyLoad()">
    <div>
        <img width="100" height="100">
    </div>
    <div>
        <form>
            <h3>User Login</h3>
            <input type="text" placeholder="User Name">
            <input type="password" placeholder="Password">
            <input type="button">
        </form>
    </div>
    <div>
        <form>
            <h3>Register</h3>
            <input type="email" placeholder="Your Email">
            <input type="button">
        </form>
    </div>
</body>
</html>

2. JavaScript can refer HTML elements using a reference name.
- Every element can have a reference name.

     <img name="pic">
     <form name="frmHome">
     <input name="btnLogin">

- You can access elements by using the name.

       pic.src="some_path";

- You can't access a generic child element without referring to its parent.

       buttonName.value="some" ;                // invalid
       formName.buttonName.value="some";        // valid

- Multiple elements in a page can have same name, this is leads to issues in referring.

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
        function BodyLoad(){
            pic.src="../public/images/kids-fashion.jpg";
            frmLogin.btnLogin.value = "Login";
            frmRegister.btnRegister.value = "Register";
        }
    </script>
</head>
<body onload="BodyLoad()">
    <div>
        <img width="100" height="100" name="pic">
    </div>
    <div>
        <form name="frmLogin">
            <h3>User Login</h3>
            <input type="text" name="txtName" placeholder="User Name">
            <input type="password" name="txtPwd" placeholder="Password">
            <input type="button" name="btnLogin">
        </form>
    </div>
    <div>
        <form name="frmRegister">
            <h3>Register</h3>
            <input type="email" placeholder="Your Email">
            <input type="button" name="btnRegister">
        </form>
    </div>
</body>
</html>

3. JavaScript can refer elements by using "ID".

- Every element can have a reference ID.
    <img  id="pic">
    <input type="button" id="btn">

- You can access elements using ID reference, It requires a DOM method

     document.getElementById()

- You can access a child without referring to its parent.
- You can directly access any element.
- ID is used as a selector in CSS, where it can be common for multiple elements.
- This conflicts with JavaScript reference.

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
        function BodyLoad(){
           document.getElementById("pic").src = "../public/images/men-fashion.jpg";
           document.getElementById("btnLogin").value = "Login";
           document.getElementById("btnRegister").value = "Register";
        }
    </script>
</head>
<body onload="BodyLoad()">
    <div>
        <img width="100" height="100" id="pic">
    </div>
    <div>
        <form name="frmLogin">
            <h3>User Login</h3>
            <input type="text" name="txtName" placeholder="User Name">
            <input type="password" name="txtPwd" placeholder="Password">
            <input type="button" id="btnLogin">
        </form>
    </div>
    <div>
        <form name="frmRegister">
            <h3>Register</h3>
            <input type="email" placeholder="Your Email">
            <input type="button" id="btnRegister">
        </form>
    </div>
</body>
</html>

4. JavaScript can refer HTML elements using CSS selectors.

- CSS supports various types of selectors to refer HTML elements.
- JavaScript can directly use CSS selectors with
    "document.querySelector()"
- You can access any element directly.
- However same reference name issues will encounter while using selectors.

Syntax:
     <img>
     <input type="button"  id="btn">

     document.querySelector("img").src=""
     document.querySelector("#btn").value=""

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
        function BodyLoad(){
            document.querySelector("img").src = "../public/images/women-fashion.jpg";
            document.querySelector(".btnLogin").value = "Login";
            document.querySelector("#btnRegister").value = "Register";
        }
    </script>
</head>
<body onload="BodyLoad()">
    <div>
        <img width="100" height="100">
    </div>
    <div>
        <form name="frmLogin">
            <h3>User Login</h3>
            <input type="text" name="txtName" placeholder="User Name">
            <input type="password" name="txtPwd" placeholder="Password">
            <input type="button" class="btnLogin">
        </form>
    </div>
    <div>
        <form name="frmRegister">
            <h3>Register</h3>
            <input type="email" placeholder="Your Email">
            <input type="button" id="btnRegister">
        </form>
    </div>
</body>
</html>

                JavaScript Output & Input Techniques

17/05
=====

Reference Techniques
- DOM Hierarchy
- Name
- ID
- Query Selector

                       JavaScript Output & Input Techniques

Output Techniques:
1. alert()
2. confirm()
3. document.write()
4. textContent
5. innerHTML
6. innerText
7. outerHTML
8. console methods


alert():
- It is a window method.
- It pops up a message box in window.
- You can display any message or result of expression
- It can show static and dynamic values.
- It will not support formats for message. [RC type]
- It will not allow to cancel.
- It is closed only with OK as confirmation.

Syntax:
      alert("message | expression");
      alert("welcome");
      alert( 10 + 20 );
      alert( "Addition=" + (10 + 20));

- You can use "\n" for line breaks.

Syntax:
     alert("line-1 \n line2 \n line3");

- You can't use any markup as message.

      alert("<h2> Welcome </h2>");    // not formatted as heading

- You can't customize by adding, changing or removing elements in alert.

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
        function DeleteClick(){
            alert("Delete Record\nRecord Deleted Successfully");
        }
    </script>
</head>
<body>
    <button onclick="DeleteClick()">Delete</button>
</body>
</html>






confirm():
- It is similar to alert but allows to cancel.
- It is a Boolean method that returns true or false.
   
        true        : on OK click
        false        : on Cancel click

Syntax:
    confirm("message | expression");     true / false

    result = confirm(" ");

    if(result == true)
    {
       // actions on OK
    }
    else
    {
      // actions on Cancel
    }

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
        function DeleteClick(){
           result = confirm("Delete Record\nAre your sure? Want to delete?");
           if(result==true){
               alert("Deleted Successfully..");
           } else {
               alert("Delete Canceled..");
           }
        }
    </script>
</head>
<body>
    <button onclick="DeleteClick()">Delete</button>
</body>
</html>

document.write():
- It is an output method that renders output on a new screen of same page.
- It supports all formats including markup.
- It allows message or expression.

Syntax:
    document.write("message | expression  | <markup>");

- You can add line breaks using <br> element.

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
        function DeleteClick(){
           result = confirm("Delete Record\nAre your sure? Want to delete?");
           if(result==true){
               document.write("<h2><font color='red'>Deleted Successfully..</font></h2><br><a href='output.html'>Back</a>");
           } else {
               alert("Delete Canceled..");
           }
        }
    </script>
</head>
<body>
    <button onclick="DeleteClick()">Delete</button>
</body>
</html>

textContent & innerText :
- These are the properties used for HTML elements that can display text.
- You can use for containers, semantic or non-semantic.
    <header> <nav> <h2> <p> <div> <span> etc.

- They don't support rich formats for text.
- They are RC type. Only plain text is allowed.
- "textContent" is a new option for modern browsers.

Syntax:
     document.querySelector("p").textContent = "message | expression";
     document.querySelector("div").innerText = "message | expression";

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
        function DeleteClick(){
           result = confirm("Delete Record\nAre your sure? Want to delete?");
           if(result==true){
                document.querySelector("p").textContent = "Deleted Successfully..";
           } else {
                document.querySelector("p").innerText  = "Delete Canceled";
           }
        }
    </script>
</head>
<body>
    <button onclick="DeleteClick()">Delete</button>
    <p></p>
</body>
</html>

innerHTML & outerHTML:
- They support rich formats.
- You can present using markup.
- innerHTML will display the result inside existing element. [as child]
- outerHTML will display the result by replacing existing element.

Syntax:
  document.querySelector("p").innerHTML = "<h2> Welcome </h2>";

        <p>
            <h2> Welcome </h2>
        </p>
Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
        function DeleteClick(){
           result = confirm("Delete Record\nAre your sure? Want to delete?");
           if(result==true){
                document.querySelector("p").outerHTML = "<h2>Deleted Successfully..</h2>";
           } else {
                document.querySelector("p").innerHTML  = "<h2>Delete Canceled</h2>";
           }
        }
    </script>
</head>
<body>
    <button onclick="DeleteClick()">Delete</button>
    <p></p>
</body>
</html>

console methods:
- Console is a CLI tool [command line ]
- It is provided in browser debugging tools.
- It is used by developers to test they commands.
- You can use console methods to render output inside console.
- Usually developers use these methods for tracking errors, warnings, info etc.

    console.log()
    console.warn()
    console.error()
    console.info()
    console.debug()
    etc.

- All console methods are RC type.
- They don't support rich formats.
- Line breaks are defined using "\n".
- You can use a message or expression.

Syntax:
     console.log("message");
     console.warn("expression");

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
        function DeleteClick(){
           console.warn("Delete Clicked");
           console.log("Your record will be deteled soon");
           result = confirm("Delete Record\nAre your sure? Want to delete?");
           if(result==true){
                document.querySelector("p").outerHTML = "<h2>Deleted Successfully..</h2>";
                console.error("Delete Confirmed");
           } else {
                document.querySelector("p").innerHTML  = "<h2>Delete Canceled</h2>";
           }
        }
    </script>
</head>
<body>
    <button onclick="DeleteClick()">Delete</button>
    <p></p>
</body>
</html>

JavaScript Input Techniques
1. prompt()
2. query string
3. form input elements

prompt():
- It is a browser window method.
- It alerts an input box that allow user to input a value.

Syntax:
    prompt("your message",  "default_value");
    prompt("your message");

- It returns 3 results
    a) null     on  Cancel click with or without value
    b) '  '         on  OK click without value
    c) 'value'   on  OK click with value

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
        function SearchClick(){
          result =  prompt("Enter Search String", "eg: mobiles, watches");
          if(result==null) {
              alert("You canceled search");
          }else if(result=='') {
              alert("Please provide a search string\nIt can't be empty");
          } else {
              document.write("You are searching for : " + result);
          }
        }
    </script>
</head>
<body>
    <button onclick="SearchClick()">Search</button>
</body>
</html>

19/05
=====

JavaScript Output Techniques
JavaScript Input Techniques
1. prompt()

2. Query String
- It is configured in the URL.
- It allows to query any content in page directly from browser address bar.
- It is appended to page using "?".
- It is a key value collection.

        page.html ? key=value

- You can append multiple keys and values using "&".

        page.html ? key1=value1 & key2=value2 & key3=value3 ...

- You can access query string using  "location.search"  property.

        location        : object
        search        : property

- JavaScript provides  "URLSearchParams()" method that can convert query string
   into a key and value collection.

        collection = new URLSearchParams(location.search);

        collection.get("key1")
        collection.get("key2")

Ex:
1. Create a new page  "input.html"

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
       function bodyload(){
            collection = new URLSearchParams(location.search);
            document.querySelector("p").innerHTML = "Search Category : " + collection.get('category') + "<br>Searching For :" + collection.get('product');
       }
    </script>
</head>
<body onload="bodyload()">
    <p></p>
</body>
</html>

2. Type the following in address bar after page name

    input.html?category=Electronics&product=Mobiles

Ex:
1. Add following pages
    - register.html
    - result.html

2. register.html  uses a form that submits data to result.html

3. result.html uses body load to access and use the query string.

register.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <h2>Register</h2>
    <form method="get" action="./result.html">
        <dl>
            <dt>Name</dt>
            <dd><input type="text" name="Name"></dd>
            <dt>Price</dt>
            <dd><input type="number" name="Price"></dd>
            <dt>City</dt>
            <dd>
                <select name="City">
                    <option>Select City</option>
                    <option>Delhi</option>
                    <option>Hyd</option>
                </select>
            </dd>
        </dl>
        <button>Submit</button>
    </form>
</body>
</html>

result.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
        function bodyload(){
            productDetails = new URLSearchParams(location.search);
            document.getElementById("lblName").textContent = productDetails.get("Name");
            document.getElementById("lblPrice").textContent = productDetails.get("Price");
            document.getElementById("lblCity").textContent = productDetails.get("City");
        }
    </script>
</head>
<body onload="bodyload()">
    <h2>Result</h2>
    <dl>
        <dt>Name</dt>
        <dd id="lblName"></dd>
        <dt>Price</dt>
        <dd id="lblPrice"></dd>
        <dt>City</dt>
        <dd id="lblCity"></dd>
    </dl>
    <a href="./register.html">Back to Register</a>
</body>
</html>


3. Input using Form input elements
- HTML form provides various input types like text, password, number, email, url, color, file, range etc.
- It also provides elements like select & textarea to input a value.
- JavaScript can use the input elements to access data dynamically from user.

Ex:
src/inox.js


function BookClick(){
    document.getElementById("btnContainer").style.display = "none";
    document.getElementById("summaryContainer").style.display = "block";


    movieName = document.getElementById("lstMovies").value;
    document.getElementById("lblMovie").textContent = movieName;

    if(movieName=="Mission Impossible"){
        document.getElementById("imgPoster").src = "../public/images/mi.jpg";
    } else {
        document.getElementById("imgPoster").src = "../public/images/final.jpg";
    }

    document.getElementById("lblCinema").textContent = document.getElementById("lstCinema").value;
    document.getElementById("lblDate").textContent = document.getElementById("lstDate").value;
    document.getElementById("lblTiming").textContent = document.getElementById("lstTiming").value;


}

function EditClick(){
    document.getElementById("lblTitle").textContent  = "Modify Booking";
    document.getElementById("btnBook").innerHTML = "Save";
    document.getElementById("btnBook").className = "btn btn-success";
}


js-examples/inox.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <script src="../node_modules/bootstrap/dist/js/bootstrap.bundle.js"></script>
    <script src="../src/scripts/inox.js"></script>
</head>
<body class="container-fluid">
    <div id="btnContainer" class="mt-4">
        <button data-bs-target="#toolbar" data-bs-toggle="modal"  class="btn btn-primary">Quick Booking</button>
    </div>
     <div class="modal fade" id="toolbar">
           <div class="modal-dialog modal-fullscreen">
              <div class="modal-content">
                  <div class="modal-header">
                      <h3 id="lblTitle">Quick Booking</h3>
                      <button class="btn btn-close" data-bs-dismiss="modal"></button>
                  </div>
                  <div class="modal-body">
                         <div class="d-flex justify-content-around">
                        <div>
                            <select class="form-select" id="lstMovies">
                                <option>Select Movie</option>
                                <option value="Mission Impossible">Mission Impossible:The Final</option>
                                <option value="Final Destination">Final Destination Bloodlines</option>
                            </select>
                        </div>
                        <div>
                            <select class="form-select" id="lstDate">
                                <option>Select Date</option>
                                <option>Today, 19 May </option>
                                <option>Tomorrow, 20 May</option>
                            </select>
                        </div>
                        <div>
                            <select class="form-select" id="lstCinema">
                                <option>Select Cinema</option>
                                <option>PVR Panjagutta </option>
                                <option>Inox B'hills</option>
                            </select>
                        </div>
                        <div>
                            <select class="form-select" id="lstTiming">
                                <option>Select Timing</option>
                                <option> 10:30 AM </option>
                                <option> 06:30 PM </option>
                            </select>
                        </div>
                        <div>
                            <button id="btnBook" onclick="BookClick()" data-bs-dismiss="modal" class="btn btn-primary">Book</button>
                        </div>
                    </div>
                  </div>
              </div>
           </div>
        </div>
      <div id="summaryContainer"  style="display: none;" class="w-25 mt-3 border border-1 rounded p-2">
          <h3 class="bi bi-ticket"> Booking Summary</h3>
          <img width="100%" height="200" id="imgPoster">
          <dl>
            <dt>Movie</dt>
            <dd id="lblMovie"></dd>
            <dt>Date</dt>
            <dd id="lblDate"></dd>
            <dt>Cinema</dt>
            <dd id="lblCinema"></dd>
            <dt>Timing</dt>
            <dd id="lblTiming"></dd>
          </dl>
          <button onclick="EditClick()" data-bs-target="#toolbar" data-bs-toggle="modal" class="btn btn-warning bi bi-pen-fill w-100"> Edit Booking </button>
      </div>
</body>
</html>

20/05
=====

JavaScript Language
1. Variables
2. Data Types
3. Operators
4. Statements
5. Functions


Variables:
- Variables are storage locations in memory where you can store a value and use it as a part of any expression.
- Variable configuration comprises of
    a) Declaration
    b) Assignment
    c) Initialization

- Declaration comprises of a keyword with name.

    keyword  variable_name;

 Note: Declaring variable is mandatory when JS is in strict mode.
       You can ignore declaration if it is not it strict mode.

- Variables in JS can be declared by using following keywords
    a) var
    b) let
    c) const

    var variableName;
    let  variableName;
    const variableName;

- Assignment is the process of configuring a value into variable after declaration.

    var x;        // declaring
    x=10;        // assignment
    x=20;        // assignment

- Initialization is the process of configuring a value into variable while declaring variable.

    var x = 10;    // initialization
    x = 20;        // assignment

FAQ: What is difference between var, let & const?

var:
- It configures a function scope for variable.
- You can declare in any block of a function and use from any another block inside function.
- It supports declaration, assignment and initialization.
- It supports shadowing.
- Shadowing is the process of re-declaring or re-initializing same name identifier again with in the specified scope.
       
        {
        var x = 10;        // initialization
        x = 20;            // assignment
        var x = 30;        // shadowing
        }
Ex:
<script>
     function f1()
     {
        var x;          // declaring
        x = 10;         // assigning
        if(x==10)
        {
            var y = 20;   // initialization
            y = 30;       // assignment
            y = 40;       // assignment
            var y = 50;   // Shadowing
        }
         document.write("x=" + x + "<br>y=" + y);
     }
     f1();
</script>

- It supports hoisting.
- Hoisting allows to use and later declare. There is no order dependency of declaring and using a variable.

Syntax:
    <script>
        x = 10;
        document.write("x=" + x);
        var x;    // hoisting
    </script>


let:
- It defines a block scope for variable.
- Block scope allows to access within the same block and in its inner block.
- It supports declaration, assignment and initialization.
- It will not support shadowing & hoisting.

Ex:
<script>
     "use strict";
     function f1()
     {
        let x;          // declaring
        x = 10;         // assignment
        if(x==10)
        {
           let y = 20;
           y = 30;      // assignment
           document.write("x=" + x + "<br>y=" + y);
        }
       
     }
     f1();
</script>

const:
- It configures a block scope for variable.
- It will allow only initialization.
- It will not allow declaring and assignment.
- It will not allow shadowing and hoisting.

Syntax:
    const x ;        // invalid
    const x = 10;    // valid
    x = 20;        // invalid

FAQ: Can we change a const ?
Ans: Yes. While initializing a new value can be sent into constant.

21/05
=====

Variables
- Declaring
- Assignment
- Initialization
- Shadowing
- Hoisting
- Keywords
    var, let, const

Variable Naming:
- Name must start with an alphabet or underscore "_" symbol.
- It can be alpha numeric with combination of numbers, but can't start with number.

    Syntax:
        var  sales2025;        // valid
        var  2025Sales;        // invalid    
        var  _sales;            // valid
        var  $sales;            // valid - but not recommended every time.
   
- The prefix "_" is used to specify that it is not for external use.
- The prefix "$" is used for library references. [ jQuery ]
- Variable name length can be up to 255 chars. [ Recommended ]
- Name can't be a keyword.

    Syntax:
        var  while;        // invalid
        var  class;        // invalid

- Names are case sensitive.

    Syntax:
        var  Form;
        var  form;            // both are different.

        var x = 10;
        var X = 20;
        console.log("x=" + x);    // 10

- Name must speak what it is.

    Syntax:
        var btnInsert;            // button for insert    
        var txtPassword;        // text box for password

- Name must be in camel case.

    Syntax:
        var   productPrice;
        var   studentName;


Declaration Scenarios:
1. Continuous set of references

    var  x, y, z;        // all 3 variables use var keyword.

    var  x; y, z;        // y & z are not declared.

    var x, y, z = 10;    // x=undefined, y=undefined, z=10

    var x = y = z = 10;    // invalid y and z not declared

    var x=10, y=20, z=30;   // valid  x=10, y=20, z=30

2. De-structure Declaration

    var [x, y, z] = [10, 20, 30];        // x = 10, y=20, z=30

    var [x, y, z] = [10];                // x = 10, y = undefined, z = undefined

    var [x, y, z] = 10;                // invalid  de-structure requires a set of values [ ]

    var x, y, z = [10];                // x = undefined, y=undefined, z = array [10]

    var x, y, z = [10,20,30];            // z = [10, 20, 30]    x=undefined, y=undefined


                           Data Types

- JavaScript is not a strongly typed language.
- It is implicitly typed or dynamically typed.
   
        var x = 10;        // x is number type
        x = "John";        // x changes to string
        x = true;            // x changes to Boolean

- Data type is all about the data structure.
- It defines the type of data, range of data and behavior of data.
- JavaScript data types are categorized into 2 groups

    1. Primitive Types
    2. Non Primitive Types

Primitive Types
- They are immutable types.
- They have fixed range for values.
- Value range can't change.
- They are stored in memory stack.
- Stack uses "LIFO" [ Last-In-First-Out ]
- JavaScript Primitive Types are

    1. Number
    2. String
    3. Boolean
    4. Null
    5. Undefined
    6. Big Int
    7. Symbol

JavaScript Number Type:
- Numeric type in JavaScript can be any one of the following
   
    Signed Integer         - 20
    Unsigned Integer           20
    Floating Point               20.42
    Double                450.34
    Decimal                   3400.34  [ 29 decimal ]
    Exponent               2e3     [ 2 x 10^3 ]  = 2000
    Binary                0b1010
    Hexadecimal             0x9311
    Octa                 0o745
    Big Int                938881122n

- Numbers can't be displayed exactly as defined, hence JavaScript provides several methods to display and format numbers.

    a) toFixed()        It sets fixed number of fractions.
    b) toPrecision()    It sets a number to fixed precision of digits.

Syntax:
        var  x = 4500.34;

        x.toFixed(2);            // 4500.34
        x.toPrecision(5);        // 4500.4
        x.toFixed(0);            // 4500

    c) toLocaleString()     It transforms into a regional string with various formats.
                     Regional string comprises of formats relative to numbers
                     currency, fractions etc.

FAQ: What is localization?
Ans:  Automatically formats numbers, date and time values according to country.

Syntax: Country

         var  price = 450000;
         price.toLocaleString('en-in');    // 4, 50, 000

Syntax:  Country with Currency
       
         price.toLocaleString('en-in', { style: "currency", currency: "INR" })

Ex:
<script>
     var x = 450000;
     document.write("X=" + x.toLocaleString('en-in', {style:"currency", currency:'INR'}));
</script>

Syntax:     Local with Percent

        var x = 0.785;
        x.toLocaleString('en-in', { style: "percent" });        // 79%

Syntax:  Local with Unit

    var speed = 110;
    speed.toLocaleStrign('en-in', { style: "unit", unit : "kilometer-per-hour"});  110 kph

Syntax: Notation Comact

    var views = 1000000;
    views.toLocaleString('en-us', { notation: "compact" });

22/05
=====

Number Type
- Methods
    toFixed()
    toPrecision()
    toLocaleString()
        - style [ currency, percent, unit ]
        - notation [ compact ]
        - region

Converting String to Number:
- JavaScript input techniques return all values in a string format.
- Number input will return a numeric string.
- You can convert numeric string to number by using parsing methods

    a) parseInt()            : for integer values
    b) parseFloat()        : for float, double and decimals

Note: You can convert only a numeric string, which must start with number.
       
            "33ABC"        valid
            "33AB44"        valid
            "AB33"        invalid
   
        parseInt("33ABC");        // 33
        parseInt("33AB44");    // 33
        parseInt("AB33");        // NaN

Ex:
<script>
    var age = parseFloat(prompt("Enter your age"));
    document.write("Your current age is " + age + "<br>");
    document.write("You will be " + (age+1) + " next year");
</script>
       
Verifying Number:
- JavaScript can verify numbers by using "isNaN()" method.
- It is a Boolean method that returns true if value is not a number.

Syntax:
    if(isNaN("A"))
    {
        // not a number;
    }

Ex:
<script>
    var age = parseFloat(prompt("Enter your age"));
    if(isNaN(age)){
        document.write("Age must be a number");
    } else {
        document.write("Your current age is " + age + "<br>");
        document.write("You will be " + (age+1) + " next year");
    }
   
</script>

Number Operators:
- JavaScript provides various operators to handle different types of number interactions.
- Operators include

        +        Addition
        -        Subtraction
        *        Multiplication
        /        Division
        %        Modulus Division
        **        Exponent [ power ]
        ++        Increment
        --        Decrement

Note:  The operator "**"  is a new from ES5+ version it is power value.
       
Ex:
<script>
    var x = parseInt(prompt("Enter an even number"));
    if(x % 2 == 0){
        document.write("x=" + x);
    } else {
        document.write("Only even number allowed");
    }
</script>

Global Scope for Variable:
- Variables a function or block scope when configured in a function.
- If you want a variable globally accessible to all functions then you can define in
  module scope.
- You can use var, let or const for declaring, assigning and initializing global variables.

Syntax:
    <script>
        // module scope
        var x=10;
        let y = 20;            => global variables
        const z = 30;
       
        function f1(){ }
        function f2(){ }
    </script>

Ex:
<script>
          var x = 10;
          let y = 20;
          const z = 30;

     function f1(){
         
          document.write("Function 1 : x=" + x + "y=" + y + "z=" + z + "<br>");
     }
      function f2(){
          document.write("Function 2 : x=" + x + "y=" + y + "z=" + z + "<br>");
     }
     f1();
     f2();
</script>

- You can configure a global variable inside function by using BOM window object.

        window.name = value;

- It is possible only when JavaScript is used in browser window.

Ex:
<script>
     "use strict";
          var x = 10;
          let y = 20;
          const z = 30;

     function f1(){
          window.a = 70;
          document.write("Function 1 : x=" + x + "y=" + y + "z=" + z + "a=" + a + "<br>");
     }
      function f2(){
          document.write("Function 2 : x=" + x + "y=" + y + "z=" + z + "a=" + a + "<br>");
     }
     f1();
     f2();
</script>

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <script>
        var volume = 0;
        function Increase(){
            volume++;           // volume = volume + 1
            document.getElementById("volume").innerHTML = volume;
        }
        function Decrease(){
            volume--;           // volume = volume - 1
            document.getElementById("volume").innerHTML = volume;
        }
    </script>
</head>
<body>
    <button onclick="Increase()" class="bi bi-volume-up"></button>
    <span id="volume"></span>
    <button onclick="Decrease()" class="bi bi-volume-down"></button>
</body>
</html>

JavaScript Math library:
- You can't handle all operations directly using operators.
- A Math library is provides to handle complex operations on numbers.

    Math.PI
    Math.random()
    Math.round()
    Math.pow()
    Math.sin()
    Math.cos()
    Math.tan()
    Math.sqrt()
    Math.avg()
    Math.floor()
    Math.ceil()
    etc..

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <script>
        function GenerateCode(){
            var code = Math.round(Math.random()*10) + "&nbsp;" + Math.round(Math.random()*10) + "&nbsp;" + Math.round(Math.random()*10) + "&nbsp;" + Math.round(Math.random()*10) + "&nbsp;" + Math.round(Math.random()*10) + "&nbsp;" + Math.round(Math.random()*10);
            document.getElementById("lblCode").innerHTML = code;
        }
        function RefreshClick(){
            GenerateCode();
        }
    </script>
</head>
<body onload="GenerateCode()">
    <dl>
        <h3>User Login</h3>
        <dt>User Name</dt>
        <dd><input type="text"></dd>
        <dt>Password</dt>
        <dd><input type="password"></dd>
        <dt>Verify Code <button onclick="RefreshClick()" class="bi bi-arrow-clockwise"></button> </dt>
        <dd id="lblCode"></dd>
    </dl>
    <button>Login</button>
</body>
</html>

23/05
=====

Formatting Numbers
Parsing Numbers
Numeric Operators
Math Functions

Ex: EMI Calculator

1. src/scripts/emi.js


function handleAmountChange()
{
     document.getElementById("txtAmount").value = document.getElementById("rangeAmount").value;
}

function handleYearChange(){
    document.getElementById("txtYears").value = document.getElementById("rangeYears").value;
}

function handleRateChange(){
    document.getElementById("txtRate").value = document.getElementById("rangeRate").value;
}

function txtAmountChange(){
    document.getElementById("rangeAmount").value = document.getElementById("txtAmount").value;
}

function txtYearsChange(){
    document.getElementById("rangeYears").value = document.getElementById("txtYears").value;
}
function txtRateChange(){
    document.getElementById("rangeRate").value = document.getElementById("txtRate").value;
}

function CalculateClick(){
    var P = parseInt(document.getElementById("txtAmount").value);
    var N = parseInt(document.getElementById("txtYears").value) * 12;
    var R = parseFloat(document.getElementById("txtRate").value) / 12 / 100;
    var EMI = P * R * (Math.pow(1+R,N)) / (Math.pow(1+R,N) - 1);
    document.getElementById("lblResult").innerHTML = "Your montly installment amount is <span class='fw-bold fs-4'>" + Math.round(EMI).toLocaleString('en-in', {style:'currency', currency:'INR', minimumFractionDigits:0}) + "</span> for next " + N + " Months" ;
}


2.  js-examples/emi.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <script src="../src/scripts/emi.js"></script>
</head>
<body class="container-fluid bg-secondary">
    <div class="bg-light text-dark p-4 m-4">
        <div class="h4 text-center">Personal Loan EMI Calculator</div>
        <div class="my-4 row">
            <div class="col">
                Amount you need &#8377; <input onchange="txtAmountChange()" type="text" id="txtAmount" size="16">
            </div>
            <div class="col">
                for <input type="text" size="2" onchange="txtYearsChange()" id="txtYears"> years
            </div>
            <div class="col">
                interest rate <input type="text" onchange="txtRateChange()" size="2" id="txtRate"> %
            </div>
        </div>
        <div class="row my-4">
            <div class="col">
                <input type="range" onchange="handleAmountChange()" step="10000" class="form-range" id="rangeAmount" min="100000" max="1000000" value="100000">
                <div>
                    <span>&#8377; 1,00,000</span>
                    <span class="float-end">&#8377; 10,00,000</span>
                </div>
            </div>
            <div class="col">
                <input type="range" onchange="handleYearChange()" class="form-range" id="rangeYears" min="1" max="5" value="1">
                <div>
                    <span>1 year</span>
                    <span class="float-end">5 years</span>
                </div>
            </div>
            <div class="col">
                <input type="range" onchange="handleRateChange()" class="form-range" id="rangeRate" min="10.45" max="18.45" value="10.45" step="0.1">
                <div>
                    <span>10.45%</span>
                    <span class="float-end">18.45%</span>
                </div>
            </div>
        </div>  
        <div class="row my-4">
            <div class="col text-end">
                <button onclick="CalculateClick()" class="btn btn-primary">Calculate</button>
            </div>
        </div>
        <div class="row my-4 text-center">
            <span id="lblResult"></span>
        </div>
    </div>
</body>
</html>

                            String Type

- String is a literal with a group of characters enclosed in quotes.
- JavaScript string can be enclosed with
    1. Double Quotes    " "
    2. Single Quotes    '  '
    3. Backticks         ` `
- String literal comprises of alphabet, number & special characters.
- Double and Single quotes can be used to switch between outer and inner string.

Syntax:
     var link  = "<a href='home.html'> Home </a>";
     var link  = '<a  href="home.html"> Home </a>';

- You have to use "+" to bind any dynamic value with a string.
- You can bind as prefix or suffix.

Ex:
<script>
     var username = prompt("Enter your name");
     var age = parseInt(prompt("Enter Age"));
     var msg1 = "Hello !" + "&nbsp;" + username + "&nbsp;" + "you will be" + "&nbsp;" + (age+1) + "&nbsp;" + "next year.";

     document.write(msg1);
</script>

- JavaScript ES5+ version introduces a data binding expression, which you can use in a string with backticks. It allows to embedded expression within string.

- Dynamic data binding expression of JavaScript is "${ }".

Syntax:
        ` string  ${dynamicValue | expression} string `;

Ex:
<script>
     var username = prompt("Enter your name");
     var age = parseInt(prompt("Enter Age"));
     var msg1 = "Hello !" + "&nbsp;" + username + "&nbsp;" + "you will be" + "&nbsp;" + (age+1) + "&nbsp;" + "next year.<br>";
     var msg2 = `Hello ! ${username} you will be ${age+1} next year.`;

     document.write(msg1);
     document.write(msg2);
</script>

- String representation with special characters may ignore several characters from printing as output.

        var path = "D:\images";        =>  D:images
       
- To print non-printable characters you have to use "\" as meta character.
   
        var path = "D:\\images";        => D:\images

Ex:
<script>
     var path = "\"d:\\images\"";

     document.write(path);
</script>

JavaScript String Formatting Methods:
- String formatting includes font, size, color, style etc.
- JavaScript provides various methods to format a string dynamically.

    bold()
    italics()
    fontsize()
    fontcolor()
    sup()
    sub()
    underline()
    strike()
    toUpperCase()
    toLowerCase() etc..

Syntax:
        var msg = "Welcome";
        msg.fontsize(4).fontcolor('green').bold().italics();

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
        function VerifyName(){
            var username = document.getElementById("txtName").value;
            var lblName = document.getElementById("lblName");

            if(username=="john") {
                lblName.innerHTML = "User Name Taken - Try Another".fontcolor('red').fontsize(2);
            } else {
                lblName.innerHTML = "User Name Available".fontcolor('green').fontsize(2).bold().italics();
            }
        }
    </script>
</head>
<body>
    <dl>
        <dt>User Name</dt>
        <dd><input type="text" onkeyup="VerifyName()" id="txtName"></dd>
        <dd id="lblName"></dd>
    </dl>
</body>
</html>

26/05
=====

String Data Type
- Single Quote
- Double Quote
- Backtick
- Binding Expression ${ }
- Escape sequence using "\"
- String Formatting methods

JavaScript blur & key up events:
- Key up is used to verify every character immediately when key is released.
- Blur defines actions to perform when element looses the focus.

Syntax:
    <input type="text" onkeyup=""  onblur="">

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
        function VerifyName(){
            var username = document.getElementById("txtName").value;
            var lblName = document.getElementById("lblName");

            if(username=="john") {
                lblName.innerHTML = "User Name Taken - Try Another".fontcolor('red').fontsize(2);
            } else {
                lblName.innerHTML = "User Name Available".fontcolor('green').fontsize(2).bold().italics();
            }
        }
        function ChangeCase(){
            var code = document.getElementById("txtCode").value;
            document.getElementById("txtCode").value = code.toUpperCase();    
        }
    </script>
</head>
<body>
    <dl>
        <dt>User Name</dt>
        <dd><input type="text" onkeyup="VerifyName()" id="txtName"></dd>
        <dd id="lblName"></dd>
        <dt>Bank IFSC Code</dt>
        <dd><input type="text" id="txtCode" onblur="ChangeCase()"></dd>
    </dl>
</body>
</html>

                        String Manipulation

1. length         : It returns the total count of chars in a string.

Syntax:
    var str = "Welcome";
    str.length;            // 7
   
Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
        function VerifyName(){
            var userName = document.getElementById("txtName").value;
            var lblNameError = document.getElementById("lblNameError");

            if(userName.length==0) {
                lblNameError.innerHTML = "User Name Required".fontcolor('red');
            } else {
                if(userName.length<4) {
                    lblNameError.innerHTML = "Name too short - Min 4 chars required".fontcolor('red');
                } else {
                    lblNameError.innerHTML = "";
                }
            }
        }
        function VerifyChars(){
            var comments = document.getElementById("txtComments").value;
            var lblComments = document.getElementById("lblComments");

            lblComments.innerHTML = `${100-comments.length} chars left`;
        }
    </script>
</head>
<body>
    <dl>
        <dt>Your Name</dt>
        <dd><input type="text" onblur="VerifyName()" onkeyup="VerifyName()" id="txtName"></dd>
        <dd id="lblNameError"></dd>
        <dt>Your Comments</dt>
        <dd>
            <textarea rows="4" onkeyup="VerifyChars()" maxlength="100" cols="40" id="txtComments"></textarea>
        </dd>
        <dd id="lblComments"></dd>
    </dl>
</body>
</html>

2. charAt()        : It returns the character at specified index.

Syntax:
    var name = "Ajay";
    name.charAt(0);        // A

   Note: Characters index in a string starts with zero.

3. charCodeAt()    : It returns the ASCII code of character at specified index.
                  A=65, Z=90, a=97, z=122

Syntax:
    var name = "Ajay";
    name.charCodeAt(0);        // 65

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
        function VerifyName(){
            var username = document.getElementById("txtName").value;
            var lblName = document.getElementById("lblName");

            if(username.charCodeAt(0)>=65 && username.charCodeAt(0)<=90){
                lblName.innerHTML = "";
            }else {
                lblName.innerHTML = "Name must start with uppercase letter".fontcolor('red');
            }
           

        }
    </script>
</head>
<body>
    <dl>
        <dt>User Name</dt>
        <dd><input type="text" onblur="VerifyName()" id="txtName"></dd>
        <dd id="lblName"></dd>
    </dl>
</body>
</html>

4. startsWith()        : It returns true if string is starting with specified char(s).

5. endsWith()        : It returns true if string is ending with specified char(s).

Syntax:
      var str = "Welcome to JavaScript";
      str.endsWith("Java");                // false
      str.endsWith("Script");                // true
      str.startsWith("W");                // true
      str.startsWith("w");                // false

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <script>
        function VerifyCard(){
            var card = document.getElementById("txtCard").value;
            var imgCard = document.getElementById("imgCard");

            if(card.startsWith("4455")) {
                imgCard.src = "../public/images/visa.jpg";
            } else {
                imgCard.src = "../public/images/master.jpg";
            }
        }
        function VerifySkype(){
            var skype  = document.getElementById("txtSkype").value;
            var lblSkype = document.getElementById("lblSkype");
            if(skype.endsWith("outlook.com")){
                lblSkype.innerHTML = "";
            } else {
                lblSkype.innerHTML = "Invalid Skype Profile".fontcolor('red');
            }
        }
    </script>
</head>
<body class="container-fluid">
    <dl class="mt-4 w-25">
        <dt>Your Card Number</dt>
        <dd class="input-group"><input maxlength="16" onblur="VerifyCard()" type="text" class="form-control" id="txtCard"> <img id="imgCard" width="80" height="40" class="input-group-text"> </dd>
        <dt class="bi bi-skype"> Your Skype ID</dt>
        <dd>
            <input type="text" onblur="VerifySkype()" id="txtSkype" class="form-control">
        </dd>
        <dd id="lblSkype"></dd>
    </dl>
</body>
</html>

6. trimStart()        : It removes the leading spaces that occur at the beginning of string.

7. trimEnd()        : It removes the leading spaces that occur at the end of string.

8. trim()            : It removes all leading spaces. [start & end]

Syntax:
     var str = "  ab";
     str.trim();            // "ab"
     
Ex:
<script>
     var password = prompt("Enter your password");
     if(password.trim()=="admin"){
        document.write("Login Success..");
     } else {
        document.write("Invalid Password");
     }
</script>

9. split()        : It splits a string at specified char and returns an array of string.
              It requires a delimiter [separator] to split string.

Syntax:
    var  str = "Welcome to JavaScript";
    str.split(' ')[0];            // Welcome
    str.split(' ')[2];            // JavaScript

Ex:
<script>
     var contacts = "John-9848483828, David-882112345";
     var users = contacts.split(',');
     var [john, david] = users;
     document.write(`John Mobile Number ${john.split('-')[1]}<br>`);
     document.write(`David Mobile Number ${david.split('-')[1]}`);
</script>

10. replace()           :It replaces the first occurrence char with a new character(s) in string.

11. replaceAll()    : It replaces all occurrences with a new char(s).

Syntax:
    str.replace("old", "new");

Ex:
<script>
     var menu = "Home Electronics Mobiles Apple iPhone16";
     document.write(menu.replaceAll(' ', ' > ') + "<br>");
     document.write(menu.replace("Apple", "AppleMobiles"));
</script>

27/05
=====

String Handling Members [ Property & Methods ]
1. length
2. charAt()
3. charCodeAt()
4. startsWith()
5. endsWith()
6. split()
7. trimStart()
8. trimEnd()
9. trim()
10. replace()
11. replaceAll()

12. indexOf()        : It returns the index number of specified character in string.
                  It returns the first occurrence index number.
                  If give character is not found then it returns "-1".


13. lastIndexOf()    : It returns the last occurrence index number of specified char.

Syntax:
     var str = "Welcome";
     str.indexOf("e");            // 1
     str.lastIndexOf("e");        // 6
     str.indexOf("j");            // -1

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
     <meta charset="UTF-8">
     <meta name="viewport" content="width=device-width, initial-scale=1.0">
     <title>Document</title>
     <script>
          function VerifyEmail(){
               var email = document.getElementById("txtEmail").value;
               var lblError = document.getElementById("lblError");
               if(email.indexOf("@")==-1){
                    lblError.innerHTML = "Invalid Email - Please include @".fontcolor('red');
               } else {
                    lblError.innerHTML = "";
               }
          }
     </script>
</head>
<body>
     <dl>
          <dt>Your email</dt>
          <dd><input type="text" onblur="VerifyEmail()" id="txtEmail"></dd>
          <dd id="lblError"></dd>
     </dl>
</body>
</html>

14. slice()        : It returns the chars between specified index.
                  It contains a start and end index.
                  The end index must be greater than the start index.

Syntax:
    str.slice(startIndex, endIndex);
    str.slice(startIndex);            // it reads up to end


15. substr()        : It returns the specified number of chars from given index.
                  The number of chars must be above zero [0].

Syntax:
    str.substr(startIndex, count_of_chars);
    str.substr(startIndex);                    // it reads up to end

16. substring()        : It returns the chars between given index.
                  It is bi-directional in reading.
                  It can read from specified position to the start or to the end.

Syntax:
    str.substring(startIndex, endIndex);
    str.substring(startIndex);                // it reads up to end

FAQ: What is difference between substr(), substring() & slice()?

Ex:
<script>
     var str = "Welcome to JavaScript";
     document.write(str.substring(7,0) + "<br>");        // Welcome
     document.write(str.substring(7,15) + "<br>");        // to Java
     document.write(str.substring(7) + "<br>");        // to JavaScript
 
</script>

Task:
    var email = prompt("Enter your email");
    var domain = ?         gmail.com, nareshit.in
    var id = ?            john_nit2, sam

    john_nit2@gmail.com
    sam@nareshit.in

Ex: using split

<script>
     var email = prompt("Enter your email");
     var [id, domain] = email.split('@');
     document.write(`Id=${id}<br>Domain=${domain}`);
</script>

Ex:
<script>
     var email = prompt("Enter your email");
     var atPos = email.indexOf("@");
     var id = email.slice(0,atPos);
     var domain = email.slice(atPos+1);
     document.write(`Id=${id}<br>Domain=${domain}`);
</script>


17. match()        : It is used to compare a string with regular expression.
                  Regular expression is built by using meta chars and quantifiers.
                  Regular expression is written in "/  /".

Syntax:
     str.match(/expression/)        => true if matching with expression

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
     <meta charset="UTF-8">
     <meta name="viewport" content="width=device-width, initial-scale=1.0">
     <title>Document</title>
     <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
     <script>
          function VerifyPassword(){
               var password = document.getElementById("txtPwd").value;
               var progressBar  = document.getElementById("progressBar");

               var regExp = /(?=.*[A-Z])\w{4,15}/;
               if(password.match(regExp)){
                    lblPwd.innerHTML = "Strong Password";
                    progressBar.style.width = "100%";
                    progressBar.className = "bg-success text-white progress-bar progress-bar-animated progress-bar-striped";
               } else {
                    if(password.length<4){
                         lblPwd.innerHTML = "Poor Password";
                         progressBar.style.width = "30%";
                         progressBar.className = "bg-danger text-white progress-bar progress-bar-animated progress-bar-striped";
                    } else {
                         lblPwd.innerHTML = "Weak Password";
                         progressBar.style.width = "70%";
                         progressBar.className = "bg-warning text-white progress-bar progress-bar-animated progress-bar-striped";
                    }
               }
          }
          function VerifyMobile(){
               var mobile = document.getElementById("txtMobile").value;
               var lblMobile = document.getElementById("lblMobile");
               var regExp = /\+91\d{10}/;
               if(mobile.match(regExp)){
                    lblMobile.innerHTML = "";
               } else {
                    lblMobile.innerHTML = "Invalid Mobile +91 & 10 digits required".fontcolor('red');
               }
          }
     </script>
</head>
<body class="container-fluid">
     <dl class="mt-4 w-25">
          <dt>Your Password</dt>
          <dd><input type="password" class="form-control" onkeyup="VerifyPassword()" id="txtPwd"></dd>
          <dd class="progress">
               <div id="progressBar">
                    <span id="lblPwd"></span>
               </div>
          </dd>
          <dt>Mobile Number</dt>
          <dd>
               <input type="text" id="txtMobile" class="form-control" onblur="VerifyMobile()">
          </dd>
          <dd id="lblMobile"></dd>
     </dl>
</body>
</html>

Summary:
1. Number
2. String
3. Boolean

28/05
=====

3. Boolean Type
 - Boolean is used in decision making.
 - JavaScript Boolean contains true or false as value.
     
Syntax:
        var stock = true;

 - Boolean can be verified using true or false keywords or by using 0 & 1.
   0=false
   1=true

         if(stock==1)            // not good
        {
        }

        if(stock==true)            // good
        {
        }
Ex:
<script>
    var stock = true;
    if(stock==true){
        document.write("In Stock");
    } else {
        document.write("Out of Stock");
    }
</script>

- HTML Boolean attributes are controlled dynamically using Boolean type.

        - disabled
        - readonly
        - required
        - checked
        - selected
        - open etc..

Syntax:
    document.querySelector("button").disabled = true/false;
    document.querySelector("dialog").open = true / false;

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
        function VerifyName(){
            var username = document.getElementById("txtName").value;
            var btnSubmit = document.getElementById("btnSubmit");
            var lblName = document.getElementById("lblName");
            if(username.length==0){
                btnSubmit.disabled = true;
                lblName.innerHTML = "User Name Required".fontcolor('red');
            } else {
                btnSubmit.disabled = false;
                lblName.innerHTML = "";
            }
        }
    </script>
</head>
<body>
    <dl>
        <dt>User Name</dt>
        <dd><input type="text" onkeyup="VerifyName()" id="txtName"></dd>
        <dd id="lblName"></dd>
    </dl>
    <button id="btnSubmit" disabled>Submit</button>
</body>
</html>

- Decision making requires Boolean operators, which are comparison and logical operators.

Comparison Operators:
   
        ==            Equal
        ===            Identical Equal
        !=            Not Equal
        !==            Not Identical
        >            Greater than
        >=            Greater than or Equal
        <            Less than
        <=            Less than or equal

Logical Operators
       
        &&            AND
        ||            OR
        !            Not

FAQ: What is difference between "=="  &  "===" ?
Ans:  "==" can compare values of different data types.
     "===" can compares only the values of same data type.

Syntax:
        "10" == 10;        // true
        "10" === 10;        // false         // it is recommended in modern JS.

     Note:  "===" is also known as strict equal


FAQ: What is the purpose of Logical AND & OR ?
Ans : They are used to bind multiple Boolean expressions.
      "AND &&" will return true if all expressions evaluate to true.
      "OR  || " will return true if any one expression evaluates to true.

Syntax:
       expression-1  &&  expression-2  && expression-3;     // true when all are true.
                                                    false if any one if false.

       expression-1 ||  expression-2 || expression-3;    // true when any one is true.
                                               false when all are false.

Syntax:
      (10 > 2) &&  (10 > 5)  &&  (10 > 14);            // false
      (10 > 2) || (10 > 5)  || (10 > 14);                // true
     
       
- Boolean value and operators are handled by using decision making statements and operators.
- Decision making operator is "?:"  ternary operator.

        ( condition ) ? true : false

        if (condition)
        {
         true;
        }
       else
       {
        false;
       }

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <script>
        function SortToggle(){
            var btnSort = document.getElementById("btnSort");
            btnSort.className = (btnSort.className==="bi bi-sort-alpha-down")?"bi bi-sort-alpha-up":"bi bi-sort-alpha-down";
        }
        function ShowClick(){
            var btnShow = document.getElementById("btnShow");
            btnShow.className = (btnShow.className==="bi bi-eye")?"bi bi-eye-slash":"bi bi-eye";
            var txtPwd = document.getElementById("txtPwd");
            txtPwd.type = (txtPwd.type==="text")?"password":"text";
        }
        function ToggleQuestion(){
            var q1 = document.getElementById("q1");
            q1.className = (q1.className==="d-none")?"d-block":"d-none";
            var icon = document.getElementById("icon");
            icon.className = (icon.className==="bi bi-plus")?"bi bi-dash":"bi bi-plus";
        }
    </script>
</head>
<body class="container-fluid">
    <h2>Toggle</h2>
    <button id="btnSort" class="bi bi-sort-alpha-down" onclick="SortToggle()"></button>
    <h2>Password</h2>
    <input type="text" id="txtPwd"> <button onclick="ShowClick()" id="btnShow" class="bi bi-eye"></button>
    <h2>Accordion</h2>
    <button onclick="ToggleQuestion()" class="btn btn-dark w-100 d-flex justify-content-between"><span>What is Netflix?</span><span id="icon" class="bi bi-plus"></span></button>
    <div id="q1" align="justify" class="d-none">
        <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Provident repellat qui obcaecati! Id dicta in delectus culpa, incidunt praesentium aliquid molestias cupiditate natus rerum. Delectus veniam sint esse vero doloribus. Lorem ipsum dolor sit amet consectetur adipisicing elit. Debitis magni neque reiciendis incidunt veniam, maiores voluptatem modi illum facilis minima eius commodi ipsa est autem rem laborum. Ipsum, sint sed.</p>
        <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Repellat enim, ea deleniti fugit autem, assumenda quasi sunt non nobis ipsam rerum debitis ex voluptatibus, excepturi iusto soluta iure aliquam recusandae! Lorem ipsum dolor sit amet, consectetur adipisicing elit. Error, nulla reiciendis odit aperiam ex vitae magni quia. Adipisci, eum debitis, expedita odio unde alias earum facere commodi cum perferendis molestias?</p>
    </div>
</body>
</html>

Ex: Checkbox toggle

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <script>
       function CheckedChange(){
        var optShow = document.getElementById("optShow");
        var imgPoster = document.getElementById("imgPoster");
        imgPoster.className = (optShow.checked)? "d-block": "d-none";
        var lblShow = document.getElementById("lblShow");
        lblShow.innerHTML = (lblShow.innerHTML==="Show")?"Hide":"Show";
       }
    </script>
</head>
<body class="container-fluid">
    <h2>Check</h2>
    <input type="checkbox" onchange="CheckedChange()" id="optShow"> <label id="lblShow">Show</label>
    <div id="imgPoster" class="d-none">
        <img src="../public/images/women-fashion.jpg" width="200" height="200">
    </div>
</body>
</html>

- Decision Making Statements are required to handle multiple conditions and hierarchy of statements.
- JavaScript decision making statements are defined using
   
        if, else, switch, case, default

The IF statement:
- It is a decision making statement.
- It have multiple forms, which include
   
        a) Forward Jump
        b) Simple Decision
        c) Multi Level Decisions
        d) Multiple Choices / Decisions

Forward Jump :
- It is a decision making approach where it continues to next only when the current condition evaluates to true.
- It will not provide any alternative.

Syntax:
        if (condition)
        {
           statements on true;
        }

29/05
=====

Boolean Type
- Comparison Operators
- Logical Operators
- Ternary Operator
- How to toggle content
- Decision Making Statements
- The IF statement
    a) Forward Jump

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
        function VerifyCard(){
            var card = document.getElementById("card").value;
            if(card==="4444555566667890") {
                document.getElementById("cvvContainer").style.display = "block";
            }
        }
        function VerifyCvv(){
            var cvv = document.getElementById("cvv").value;
            if(cvv==="2345"){
                document.getElementById("expiryContainer").style.display = "block";
            }
        }
        function VerifyExpiry(){
            var expiry = document.getElementById("expiry").value;
            if(expiry==="2026"){
                document.getElementById("btnPay").disabled = false;
            }
        }
    </script>
</head>
<body>
    <fieldset>
        <legend>Payment Details</legend>
        <dl>
            <dt>Card Number</dt>
            <dd><input type="text" onblur="VerifyCard()" id="card" size="16" maxlength="16"></dd>
            <div id="cvvContainer" style="display: none;">
                <dt>CVV</dt>
                <dd><input type="text" onblur="VerifyCvv()" id="cvv" size="4"></dd>
            </div>
            <div id="expiryContainer" style="display: none;">
                <dt>Expiry</dt>
            <dd>
                <select id="expiry" onchange="VerifyExpiry()">
                    <option>Select Expiry</option>
                    <option>2025</option>
                    <option>2026</option>
                    <option>2027</option>
                </select>
            </dd>
            </div>
        </dl>
        <button id="btnPay" disabled>Pay</button>
    </fieldset>
</body>
</html>

b) Simple Decision
- It is a decision making approach where single alternative is provided.
- The alternative clause is "else".

Syntax:
    if (condition)
    {
       statement on true;
    }
    else
    {
      statement on false;
    }


c) Multi Level Decisions
 - It implements forward jump approach as it verifies the next condition only when current evaluates to true.
- It is good in verifying individual references instead of verifying all expressions simultaneously at the same time.
- It is more clear in reporting issues in conditions.

Syntax:
    if(condition-1)
    {
         if(condition-2)
         {
         statement on both conditions true;
         }
        else
        {
        statement on condition 2 false;
        }
    }
    else
    {
       statement of condition-1 false;
    }

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
        function LoginClick(){
            var username = document.getElementById("txtName").value;
            var password = document.getElementById("txtPwd").value;
            var msg = document.getElementById("msg");
            if(username.length===0){
                msg.innerHTML = "User Name Required".fontcolor('red');
                } else {
                    if(username==="john_nit"){
                        if(password.length===0){
                            msg.innerHTML = "Password Required".fontcolor('red');
                        }else {
                            if(password==="john111"){
                                document.write("Login Success..");
                            } else {
                                msg.innerHTML= "Invalid Password".fontcolor('red');
                            }
                        }
                } else {
                    msg.innerHTML = "Invalid User Name".fontcolor('red');
                }
            }
           
        }
    </script>
</head>
<body>
    <fieldset>
        <legend>User Login</legend>
        <dl>
            <dt>User Name</dt>
            <dd><input type="text" id="txtName"></dd>
            <dt>Password</dt>
            <dd><input type="password" id="txtPwd"></dd>
        </dl>
        <button onclick="LoginClick()">Login</button>
        <br><br>
        <div id="msg" align="center"></div>
    </fieldset>
</body>
</html>

d) Multiple Choices
- It is a decision making approach that provides multiple alternatives.
- All alternatives are defined using "else if" clause.

Syntax:
    if(condition-1)
    {
       statement on condition-1 true;
    }
    else if(condition-2)
    {
       statement on condition-2 true;
    }
    else
    {
      statement on all conditions false;
    }

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <script>
        var flag = "";
        var email = "john_nit@gmail.com";
        var mobile = "+919876543211";

        function ToggleContainers(){
            document.getElementById("userContainer").style.display = "none";
            document.getElementById("pwdContainer").style.display = "block";
        }

        function ContinueClick(){
            var user = document.getElementById("txtUser").value;
            var userError = document.getElementById("userError");
            if(user===email){
                flag = `Your email ${email} verified successfully - Activation link sent`;
                ToggleContainers();
            }
            else if(user===mobile) {
                flag = `Your mobile ${mobile} verified Successfully - OTP Sent`;
                ToggleContainers();
            }
            else {
                userError.innerHTML = `${user} doesn't exist`;
            }
        }
        function LoginClick(){
            var password = document.getElementById("txtPwd").value;
            if(password==="john@123"){
                document.write(`<h2>${flag}</h2>`);
            } else {
                document.getElementById("pwdError").innerHTML = "Invalid Password";
            }
        }
    </script>
</head>
<body class="container-fluid d-flex justify-content-center">
    <div class="mt-4 border border-1 p-4" style="width: 400px;">
        <div class="fs-3">Sign in or create account</div>
        <div id="userContainer">
            <label class="form-label fw-bold mt-4"> Enter mobile number or email </label>
            <div>
                <input type="text" id="txtUser" class="form-control">
                <div id="userError" class="text-danger"></div>
            </div>
            <div class="mt-3">
                <button onclick="ContinueClick()" class="btn btn-warning w-100">Continue</button>
            </div>
        </div>
        <div id="pwdContainer" style="display: none;">
             <label class="form-label fw-bold mt-4"> Your password </label>
            <div>
                <input type="password" id="txtPwd" class="form-control">
                <div id="pwdError" class="text-danger"></div>
            </div>
            <div class="mt-3">
                <button onclick="LoginClick()" class="btn btn-warning w-100">Login</button>
            </div>
        </div>
    </div>
</body>
</html>

Summary
- Forward Jump
- Simple Decision
- Multiple Choices
- Multi Level Decisions

                        The "Switch" Selector
- Switch is used to interrupt the flow of electrons in a circuit.
- Switches are classified into various types
    a) toggle switch
    b) push button switch
    c) joy stick switch
    d) selector switch
        etc..

30/05
=====

Switch Case
Syntax:
    switch( value | expression )
    {
      case  value | expression:
        statements;
        jump;
     default:
        statements when case mismatch;
        jump;
    }

Ex:
<script>
    var n = parseInt(prompt("Enter Number"));
    switch(n)
    {
        case 1:
        document.write("One");
        break;
        case 2:
        document.write("Two");
        break;
        case 3:
        document.write("Three");
        break;
        case 4:
        document.write("Four");
        break;
        default:
        document.write("Please enter value from 1 to 4 only");
        break;
    }
</script>

FAQ's:
1. Can we define switch without default?
A. Yes.

2. Can we define "default" before or between cases?
A. Yes. There is no order dependency.

3. If multiple cases are matching with value then which one will execute?
A. The first occurrence block will execute.

4. Can we define case without jump? (break)
A. Yes. It continues to next block and stops when next break occurs.

Ex:
<script>
    var n = parseInt(prompt("Enter Number"));
    switch(n)
    {
       
        case 1:
        document.write("One");
        break;
        case 2:
        document.write("Two<br>");
        case 3:
        document.write("Three");
        break;
        case 4:
        document.write("Four");
        break;
        default:
        document.write("Please enter value from 1 to 4 only");
        break;
    }
</script>

5. Can we use "return" as jump statement?
A. Yes.

6. What is difference between "break" & "return" ?
A. "break" ends the block but continue with the function.
    "return" terminates the block and compiling process.

Ex:
<script>
    function f1(){
    var n = parseInt(prompt("Enter Number"));
    switch(n)
    {
       
        case 1:
        document.write("One");
        break;
        case 2:
        document.write("Two<br>");
        return;
        case 3:
        document.write("Three");
        break;
        case 4:
        document.write("Four");
        break;
        default:
        document.write("Please enter value from 1 to 4 only");
        break;
    }
    }
    f1();
</script>

7. How to configure same block for multiple cases?
A. By writing multiple cases for same set of statements.

    case 1:
    case 2:
    case 3:
        statements;
        break;
   
Ex:
<script>
    function f1(){
      var choice = prompt("Enter a string");
      switch(choice)
      {
           case "red":
           case "green":
           case "blue":
            document.write(`You selected ${choice} color`);
            break;
           case "apple":
           case "mango":
            document.write(`Your selected ${choice} fruit`);
            break;
           default:
            document.write(`Please provide color or fruit name from given list`);
            break;
           
      }
    }
    f1();
</script>

Ex:
<script>
    function f1(){
      var choice = prompt("Enter a choice y or n");
      switch(choice)
      {
           case "y":
           case "Y":
           document.write("You selected YES to continue");
           break;
           case "n":
           case "N":
           document.write("You select NO to stop");
           break;
           default:
           document.write(`Please enter y or n only`);
           break;
      }
    }
    f1();
</script>


8. How to define same block of statements for a range of values?
A. You can configure range using Boolean expression.
     If case is using a Boolean expression then the switch value must be always true.

Syntax:
    switch(true)
    {
      case (Boolean_Expression):
        statements;
        jump;
    }

<script>
    function f1(){
      var n = parseInt(prompt("Enter a number"));
      switch(true)
      {
           case (n>=1 && n<=10):
           document.write(`Your number ${n} is between 1 to 10`);
           break;
           case (n>=11 && n<=20):
           document.write(`Your number ${n} is between 11 to 20`);
           break;
      }
    }
    f1();
</script>

Ex: Verify Mobile

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <script>
        var regExp = / /;
        var tip = "";
        function CountryChange(){
            var flag = document.getElementById("imgFlag");
            var countryname = document.getElementById("lstCountries").value;
            var mobile = document.getElementById("txtMobile");
            switch(countryname)
            {
                case "India":
                regExp = /\+91\d{10}/;
                tip = "+91 and 10 digits";
                flag.src = "../public/images/ind.png";
                break;
                case "US":
                regExp = /\+\(1\)\(\d{3}\)\s\d{4}-\d{4}/;
                tip = "+(1)(000) 0000-0000";
                flag.src = "../public/images/us.png";
                break;
                case "UK":
                regExp = /\+\(44\)\(\d{2}\)\s\d{3}\s\d{4}/;
                tip = "+(44)(00) 000 0000";
                flag.src = "../public/images/uk.jpg";
                break;
            }
            mobile.placeholder = tip;
        }

        function VerifyClick(){
            var mobile = document.getElementById("txtMobile").value;
            if(mobile.match(regExp)) {
                document.write("<h2>Mobile Verified Successfully..<h2>");
            } else {
                document.getElementById("lblMobile").innerHTML = `Invalid Mobile : ${tip}`;
            }

        }
    </script>
</head>
<body class="container-fluid">
   <h3>Verify Your Mobile</h3>  
   <dl class="w-25">
    <dt>Your country </dt>
    <dd class="input-group">
        <select class="form-select" onchange="CountryChange()" id="lstCountries">
            <option>Select Country</option>
            <option>India</option>
            <option>US</option>
            <option>UK</option>
        </select>
        <img class="input-group-text" id="imgFlag" width="60" height="40">
    </dd>
    <dt>Mobile Number</dt>
    <dd>
        <input type="text" id="txtMobile" class="form-control">
    </dd>
    <dd id="lblMobile" class="text-danger"></dd>
    <button onclick="VerifyClick()" class="btn btn-warning mt-3 w-100">Verify Mobile</button>
   </dl>

</body>
</html>

                          Undefined Type
- JavaScript is implicitly typed language.
- The data type is determined according to the value initialized or assigned.
- If value is not defined at compile time then the compiler sets it to "undefined".

Syntax:
    var x;
    console.log(x);        // undefined

- You can verify value by using "undefined" keyword.

Syntax:
    if (x === undefined)        // Not good
    {
    }

    if(x)                        // Good - returns true if defined with value
    {
    }

Ex:
<script>
    var price;
    if(price){
        document.write(`Price=${price}`);
       
    } else {
        document.write("Price not defined");
    }
</script>

FAQ: What is difference between undefined & not defined?
Ans : Undefined is about the value and not defined about the reference memory.
         
   
                            Null
- It specifies that value is not provided at runtime of application.
- At compile time if value is not defined then it uses "undefined".
- Null is for dynamic values.

Syntax:
var x = prompt("enter value");        string | null


Summary: Primitive
1. number
2. string
3. Boolean
4. null
5. undefined
6. big int
7. symbol

                          Non Primitive Types

31/05
=====

Non Primitive Types
- They are mutable types.
- They don't have a fixed range for value, it varies according to memory available.
- They are stored in memory heap.
- Heap allows to access random, there is no order of accessing.
- JavaScript non primitive types are
    a) Array
    b) Object
    c) Map


                             Array
- Arrays are used in computer programming to reduce overhead and complexity.
- Arrays reduce overhead by storing values in a sequential order.
- Arrays reduce complexity by storing multiple values under one name.
- Array can handle various data types in a sequence, how ever is not possible for few technologies.

- Array size can change dynamically, which is again an issue for few technologies.

- Array refers to a type of arrangement, where every sequence have an meaningful order, however it allows to access in random order.

Configuring Array:

1. Array is declared with a keyword and name.

    - You can use var, let and const for declaring array.
    - Name refers to a variable name.

    var  products;

2. Array requires assignment or initialization of memory for multiple values.

    - Multiple values are configured using 2 techniques

        a) [ ]            meta character
        b) Array()        constructor

        var  products = [ ];            // initialization
        var  products = new Array();    // initialization

                    (or)
       
        var products;
        products = [ ];                // assignment
       
        var products;
        products = new Array();        // assignment

FAQ: What is difference between "[ ]" meta character & "Array()" constructor.
Ans:  Array meta character [] configures a static memory, which is a continuous
     memory.

     Array constructor  "Array()" configures a dynamic memory, which is discreet
     memory.

Note: "new" is dynamic memory allocating operator.


Storing and Reading elements from Array:

- Elements in array are stored with reference of a property that maps to memory index.
- Property is a string type mapping to index, which is number type.

        "0"              => 0
        property        => index

    values[0] = 10;        // valid
    values["1"] = 20;        // valid

- Array element can be any type
    a) primitive type
    b) non primitive type
    c) function type

EX:
<script>
     var values = [10, true, "A", ["Delhi", "Hyd"], function (){document.write("Welcome to arrays")}];

     document.write(values[3][1] + "<br>");

     values[4]();
     
</script>